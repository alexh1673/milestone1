{"ast":null,"code":"var _jsxFileName = \"/root/ms1/my-app/src/Fetch.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Editor from \"./Editor\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Fetch() {\n  _s();\n  const [editing, setEditing] = useState(false);\n  const [text, setText] = useState(\"\");\n  const handleUpdate = event => {\n    setText(event.target.value);\n  };\n  const handleSubmit = () => {\n    //EventSource stuff <- what we want \n    //ok the thin <- u little shit\n    const events = new EventSource(`http://194.113.75.203:3001/connect/${text}`);\n    //or we can just do addEventListener\n    events.onmessage = event => {\n      if (event.type === 'sync') {\n        //add data to y doc\n      } else if (event.type === 'update') {\n        //update y doc\n      }\n      console.log(event.data); //<- our data from the backend is here\n      //now gotta figure out how to tell the typee of event (sync or update)\n      //if sync add data to y doc obj\n      //if update update crdt obj (which in this case would b y doc)\n    };\n    //fetch(`http://194.113.75.203:3001/connect/${text}`) //fetch isn't what we want here using this as a placeholder\n    setEditing(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: editing ? /*#__PURE__*/_jsxDEV(Editor, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(React.Component, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleUpdate,\n        type: \"text\",\n        placeholder: \"Enter doc id\",\n        name: \"id\",\n        id: \"id\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onSubmit: handleSubmit,\n        type: \"submit\",\n        children: \"Open\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 33\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 12\n  }, this);\n}\n_s(Fetch, \"P+yUM9d60qz/Fsdexy7FurmhrnQ=\");\n_c = Fetch;\nexport default Fetch;\nvar _c;\n$RefreshReg$(_c, \"Fetch\");","map":{"version":3,"names":["React","useState","Editor","Fetch","editing","setEditing","text","setText","handleUpdate","event","target","value","handleSubmit","events","EventSource","onmessage","type","console","log","data"],"sources":["/root/ms1/my-app/src/Fetch.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Editor from \"./Editor\";\n\nfunction Fetch() {\n    const [editing, setEditing] = useState(false);\n    const [text, setText] = useState(\"\");\n\n    const handleUpdate = (event) => {\n        setText(event.target.value);\n    }\n    const handleSubmit = () => {\n        //EventSource stuff <- what we want \n        //ok the thin <- u little shit\n        const events = new EventSource(`http://194.113.75.203:3001/connect/${text}`)\n            //or we can just do addEventListener\n        events.onmessage = (event) => {\n               if(event.type === 'sync'){\n                    //add data to y doc\n               }else if(event.type === 'update'){\n                    //update y doc\n               }\n            console.log(event.data); //<- our data from the backend is here\n            //now gotta figure out how to tell the typee of event (sync or update)\n            //if sync add data to y doc obj\n            //if update update crdt obj (which in this case would b y doc)\n               \n        };\n        //fetch(`http://194.113.75.203:3001/connect/${text}`) //fetch isn't what we want here using this as a placeholder\n        setEditing(true);\n    }\n    \n    return <div>\n       {editing ? <Editor /> : (<React.Component>\n                <input onChange={handleUpdate} type=\"text\" placeholder=\"Enter doc id\" name=\"id\" id=\"id\" required></input>\n            <button onSubmit={handleSubmit} type=\"submit\">Open</button> </React.Component>)}\n    </div>\n}\n\nexport default Fetch;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,UAAU;AAAC;AAE9B,SAASC,KAAK,GAAG;EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGJ,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACK,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMO,YAAY,GAAIC,KAAK,IAAK;IAC5BF,OAAO,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAC/B,CAAC;EACD,MAAMC,YAAY,GAAG,MAAM;IACvB;IACA;IACA,MAAMC,MAAM,GAAG,IAAIC,WAAW,CAAE,sCAAqCR,IAAK,EAAC,CAAC;IACxE;IACJO,MAAM,CAACE,SAAS,GAAIN,KAAK,IAAK;MACvB,IAAGA,KAAK,CAACO,IAAI,KAAK,MAAM,EAAC;QACpB;MACL,CAAC,MAAK,IAAGP,KAAK,CAACO,IAAI,KAAK,QAAQ,EAAC;QAC5B;MACL;MACHC,OAAO,CAACC,GAAG,CAACT,KAAK,CAACU,IAAI,CAAC,CAAC,CAAC;MACzB;MACA;MACA;IAEJ,CAAC;IACD;IACAd,UAAU,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,oBAAO;IAAA,UACHD,OAAO,gBAAG,QAAC,MAAM;MAAA;MAAA;MAAA;IAAA,QAAG,gBAAI,QAAC,KAAK,CAAC,SAAS;MAAA,wBAChC;QAAO,QAAQ,EAAEI,YAAa;QAAC,IAAI,EAAC,MAAM;QAAC,WAAW,EAAC,cAAc;QAAC,IAAI,EAAC,IAAI;QAAC,EAAE,EAAC,IAAI;QAAC,QAAQ;MAAA;QAAA;QAAA;QAAA;MAAA,QAAS,eAC7G;QAAQ,QAAQ,EAAEI,YAAa;QAAC,IAAI,EAAC,QAAQ;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAc;IAAA;MAAA;MAAA;MAAA;IAAA;EAAoB;IAAA;IAAA;IAAA;EAAA,QACjF;AACV;AAAC,GAjCQT,KAAK;AAAA,KAALA,KAAK;AAmCd,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module"}