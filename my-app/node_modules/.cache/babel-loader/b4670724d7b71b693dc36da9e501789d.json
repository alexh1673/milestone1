{"ast":null,"code":"/**\n * Utility module to work with time.\n *\n * @module time\n */\n\nimport * as metric from './metric.js';\nimport * as math from './math.js';\n\n/**\n * Return current time.\n *\n * @return {Date}\n */\nexport const getDate = () => new Date();\n\n/**\n * Return current unix time.\n *\n * @return {number}\n */\nexport const getUnixTime = Date.now;\n\n/**\n * Transform time (in ms) to a human readable format. E.g. 1100 => 1.1s. 60s => 1min. .001 => 10μs.\n *\n * @param {number} d duration in milliseconds\n * @return {string} humanized approximation of time\n */\nexport const humanizeDuration = d => {\n  if (d < 60000) {\n    const p = metric.prefix(d, -1);\n    return math.round(p.n * 100) / 100 + p.prefix + 's';\n  }\n  d = math.floor(d / 1000);\n  const seconds = d % 60;\n  const minutes = math.floor(d / 60) % 60;\n  const hours = math.floor(d / 3600) % 24;\n  const days = math.floor(d / 86400);\n  if (days > 0) {\n    return days + 'd' + (hours > 0 || minutes > 30 ? ' ' + (minutes > 30 ? hours + 1 : hours) + 'h' : '');\n  }\n  if (hours > 0) {\n    /* istanbul ignore next */\n    return hours + 'h' + (minutes > 0 || seconds > 30 ? ' ' + (seconds > 30 ? minutes + 1 : minutes) + 'min' : '');\n  }\n  return minutes + 'min' + (seconds > 0 ? ' ' + seconds + 's' : '');\n};","map":{"version":3,"names":["metric","math","getDate","Date","getUnixTime","now","humanizeDuration","d","p","prefix","round","n","floor","seconds","minutes","hours","days"],"sources":["/root/ms1/node_modules/lib0/time.js"],"sourcesContent":["/**\n * Utility module to work with time.\n *\n * @module time\n */\n\nimport * as metric from './metric.js'\nimport * as math from './math.js'\n\n/**\n * Return current time.\n *\n * @return {Date}\n */\nexport const getDate = () => new Date()\n\n/**\n * Return current unix time.\n *\n * @return {number}\n */\nexport const getUnixTime = Date.now\n\n/**\n * Transform time (in ms) to a human readable format. E.g. 1100 => 1.1s. 60s => 1min. .001 => 10μs.\n *\n * @param {number} d duration in milliseconds\n * @return {string} humanized approximation of time\n */\nexport const humanizeDuration = d => {\n  if (d < 60000) {\n    const p = metric.prefix(d, -1)\n    return math.round(p.n * 100) / 100 + p.prefix + 's'\n  }\n  d = math.floor(d / 1000)\n  const seconds = d % 60\n  const minutes = math.floor(d / 60) % 60\n  const hours = math.floor(d / 3600) % 24\n  const days = math.floor(d / 86400)\n  if (days > 0) {\n    return days + 'd' + ((hours > 0 || minutes > 30) ? ' ' + (minutes > 30 ? hours + 1 : hours) + 'h' : '')\n  }\n  if (hours > 0) {\n    /* istanbul ignore next */\n    return hours + 'h' + ((minutes > 0 || seconds > 30) ? ' ' + (seconds > 30 ? minutes + 1 : minutes) + 'min' : '')\n  }\n  return minutes + 'min' + (seconds > 0 ? ' ' + seconds + 's' : '')\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,OAAO,KAAKA,MAAM,MAAM,aAAa;AACrC,OAAO,KAAKC,IAAI,MAAM,WAAW;;AAEjC;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,OAAO,GAAG,MAAM,IAAIC,IAAI,EAAE;;AAEvC;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAGD,IAAI,CAACE,GAAG;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAGC,CAAC,IAAI;EACnC,IAAIA,CAAC,GAAG,KAAK,EAAE;IACb,MAAMC,CAAC,GAAGR,MAAM,CAACS,MAAM,CAACF,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9B,OAAON,IAAI,CAACS,KAAK,CAACF,CAAC,CAACG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,GAAGH,CAAC,CAACC,MAAM,GAAG,GAAG;EACrD;EACAF,CAAC,GAAGN,IAAI,CAACW,KAAK,CAACL,CAAC,GAAG,IAAI,CAAC;EACxB,MAAMM,OAAO,GAAGN,CAAC,GAAG,EAAE;EACtB,MAAMO,OAAO,GAAGb,IAAI,CAACW,KAAK,CAACL,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE;EACvC,MAAMQ,KAAK,GAAGd,IAAI,CAACW,KAAK,CAACL,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE;EACvC,MAAMS,IAAI,GAAGf,IAAI,CAACW,KAAK,CAACL,CAAC,GAAG,KAAK,CAAC;EAClC,IAAIS,IAAI,GAAG,CAAC,EAAE;IACZ,OAAOA,IAAI,GAAG,GAAG,IAAKD,KAAK,GAAG,CAAC,IAAID,OAAO,GAAG,EAAE,GAAI,GAAG,IAAIA,OAAO,GAAG,EAAE,GAAGC,KAAK,GAAG,CAAC,GAAGA,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC;EACzG;EACA,IAAIA,KAAK,GAAG,CAAC,EAAE;IACb;IACA,OAAOA,KAAK,GAAG,GAAG,IAAKD,OAAO,GAAG,CAAC,IAAID,OAAO,GAAG,EAAE,GAAI,GAAG,IAAIA,OAAO,GAAG,EAAE,GAAGC,OAAO,GAAG,CAAC,GAAGA,OAAO,CAAC,GAAG,KAAK,GAAG,EAAE,CAAC;EAClH;EACA,OAAOA,OAAO,GAAG,KAAK,IAAID,OAAO,GAAG,CAAC,GAAG,GAAG,GAAGA,OAAO,GAAG,GAAG,GAAG,EAAE,CAAC;AACnE,CAAC"},"metadata":{},"sourceType":"module"}