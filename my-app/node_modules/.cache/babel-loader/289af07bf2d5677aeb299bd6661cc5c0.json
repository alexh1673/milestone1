{"ast":null,"code":"/* eslint-env browser */\n\n/**\n * Helpers for cross-tab communication using broadcastchannel with LocalStorage fallback.\n *\n * ```js\n * // In browser window A:\n * broadcastchannel.subscribe('my events', data => console.log(data))\n * broadcastchannel.publish('my events', 'Hello world!') // => A: 'Hello world!' fires synchronously in same tab\n *\n * // In browser window B:\n * broadcastchannel.publish('my events', 'hello from tab B') // => A: 'hello from tab B'\n * ```\n *\n * @module broadcastchannel\n */\n\n// @todo before next major: use Uint8Array instead as buffer object\n\nimport * as map from './map.js';\nimport * as buffer from './buffer.js';\nimport * as storage from './storage.js';\n\n/**\n * @typedef {Object} Channel\n * @property {Set<function(any, any):any>} Channel.subs\n * @property {any} Channel.bc\n */\n\n/**\n * @type {Map<string, Channel>}\n */\nconst channels = new Map();\nclass LocalStoragePolyfill {\n  /**\n   * @param {string} room\n   */\n  constructor(room) {\n    this.room = room;\n    /**\n     * @type {null|function({data:ArrayBuffer}):void}\n     */\n    this.onmessage = null;\n    storage.onChange(e => e.key === room && this.onmessage !== null && this.onmessage({\n      data: buffer.fromBase64(e.newValue || '')\n    }));\n  }\n\n  /**\n   * @param {ArrayBuffer} buf\n   */\n  postMessage(buf) {\n    storage.varStorage.setItem(this.room, buffer.toBase64(buffer.createUint8ArrayFromArrayBuffer(buf)));\n  }\n}\n\n// Use BroadcastChannel or Polyfill\nconst BC = typeof BroadcastChannel === 'undefined' ? LocalStoragePolyfill : BroadcastChannel;\n\n/**\n * @param {string} room\n * @return {Channel}\n */\nconst getChannel = room => map.setIfUndefined(channels, room, () => {\n  const subs = new Set();\n  const bc = new BC(room);\n  /**\n   * @param {{data:ArrayBuffer}} e\n   */\n  bc.onmessage = e => subs.forEach(sub => sub(e.data, 'broadcastchannel'));\n  return {\n    bc,\n    subs\n  };\n});\n\n/**\n * Subscribe to global `publish` events.\n *\n * @function\n * @param {string} room\n * @param {function(any, any):any} f\n */\nexport const subscribe = (room, f) => getChannel(room).subs.add(f);\n\n/**\n * Unsubscribe from `publish` global events.\n *\n * @function\n * @param {string} room\n * @param {function(any, any):any} f\n */\nexport const unsubscribe = (room, f) => getChannel(room).subs.delete(f);\n\n/**\n * Publish data to all subscribers (including subscribers on this tab)\n *\n * @function\n * @param {string} room\n * @param {any} data\n * @param {any} [origin]\n */\nexport const publish = function (room, data) {\n  let origin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  const c = getChannel(room);\n  c.bc.postMessage(data);\n  c.subs.forEach(sub => sub(data, origin));\n};","map":{"version":3,"names":["map","buffer","storage","channels","Map","LocalStoragePolyfill","constructor","room","onmessage","onChange","e","key","data","fromBase64","newValue","postMessage","buf","varStorage","setItem","toBase64","createUint8ArrayFromArrayBuffer","BC","BroadcastChannel","getChannel","setIfUndefined","subs","Set","bc","forEach","sub","subscribe","f","add","unsubscribe","delete","publish","origin","c"],"sources":["/root/ms1/node_modules/lib0/broadcastchannel.js"],"sourcesContent":["/* eslint-env browser */\n\n/**\n * Helpers for cross-tab communication using broadcastchannel with LocalStorage fallback.\n *\n * ```js\n * // In browser window A:\n * broadcastchannel.subscribe('my events', data => console.log(data))\n * broadcastchannel.publish('my events', 'Hello world!') // => A: 'Hello world!' fires synchronously in same tab\n *\n * // In browser window B:\n * broadcastchannel.publish('my events', 'hello from tab B') // => A: 'hello from tab B'\n * ```\n *\n * @module broadcastchannel\n */\n\n// @todo before next major: use Uint8Array instead as buffer object\n\nimport * as map from './map.js'\nimport * as buffer from './buffer.js'\nimport * as storage from './storage.js'\n\n/**\n * @typedef {Object} Channel\n * @property {Set<function(any, any):any>} Channel.subs\n * @property {any} Channel.bc\n */\n\n/**\n * @type {Map<string, Channel>}\n */\nconst channels = new Map()\n\nclass LocalStoragePolyfill {\n  /**\n   * @param {string} room\n   */\n  constructor (room) {\n    this.room = room\n    /**\n     * @type {null|function({data:ArrayBuffer}):void}\n     */\n    this.onmessage = null\n    storage.onChange(e => e.key === room && this.onmessage !== null && this.onmessage({ data: buffer.fromBase64(e.newValue || '') }))\n  }\n\n  /**\n   * @param {ArrayBuffer} buf\n   */\n  postMessage (buf) {\n    storage.varStorage.setItem(this.room, buffer.toBase64(buffer.createUint8ArrayFromArrayBuffer(buf)))\n  }\n}\n\n// Use BroadcastChannel or Polyfill\nconst BC = typeof BroadcastChannel === 'undefined' ? LocalStoragePolyfill : BroadcastChannel\n\n/**\n * @param {string} room\n * @return {Channel}\n */\nconst getChannel = room =>\n  map.setIfUndefined(channels, room, () => {\n    const subs = new Set()\n    const bc = new BC(room)\n    /**\n     * @param {{data:ArrayBuffer}} e\n     */\n    bc.onmessage = e => subs.forEach(sub => sub(e.data, 'broadcastchannel'))\n    return {\n      bc, subs\n    }\n  })\n\n/**\n * Subscribe to global `publish` events.\n *\n * @function\n * @param {string} room\n * @param {function(any, any):any} f\n */\nexport const subscribe = (room, f) => getChannel(room).subs.add(f)\n\n/**\n * Unsubscribe from `publish` global events.\n *\n * @function\n * @param {string} room\n * @param {function(any, any):any} f\n */\nexport const unsubscribe = (room, f) => getChannel(room).subs.delete(f)\n\n/**\n * Publish data to all subscribers (including subscribers on this tab)\n *\n * @function\n * @param {string} room\n * @param {any} data\n * @param {any} [origin]\n */\nexport const publish = (room, data, origin = null) => {\n  const c = getChannel(room)\n  c.bc.postMessage(data)\n  c.subs.forEach(sub => sub(data, origin))\n}\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAO,KAAKA,GAAG,MAAM,UAAU;AAC/B,OAAO,KAAKC,MAAM,MAAM,aAAa;AACrC,OAAO,KAAKC,OAAO,MAAM,cAAc;;AAEvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMC,QAAQ,GAAG,IAAIC,GAAG,EAAE;AAE1B,MAAMC,oBAAoB,CAAC;EACzB;AACF;AACA;EACEC,WAAW,CAAEC,IAAI,EAAE;IACjB,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB;AACJ;AACA;IACI,IAAI,CAACC,SAAS,GAAG,IAAI;IACrBN,OAAO,CAACO,QAAQ,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKJ,IAAI,IAAI,IAAI,CAACC,SAAS,KAAK,IAAI,IAAI,IAAI,CAACA,SAAS,CAAC;MAAEI,IAAI,EAAEX,MAAM,CAACY,UAAU,CAACH,CAAC,CAACI,QAAQ,IAAI,EAAE;IAAE,CAAC,CAAC,CAAC;EACnI;;EAEA;AACF;AACA;EACEC,WAAW,CAAEC,GAAG,EAAE;IAChBd,OAAO,CAACe,UAAU,CAACC,OAAO,CAAC,IAAI,CAACX,IAAI,EAAEN,MAAM,CAACkB,QAAQ,CAAClB,MAAM,CAACmB,+BAA+B,CAACJ,GAAG,CAAC,CAAC,CAAC;EACrG;AACF;;AAEA;AACA,MAAMK,EAAE,GAAG,OAAOC,gBAAgB,KAAK,WAAW,GAAGjB,oBAAoB,GAAGiB,gBAAgB;;AAE5F;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAGhB,IAAI,IACrBP,GAAG,CAACwB,cAAc,CAACrB,QAAQ,EAAEI,IAAI,EAAE,MAAM;EACvC,MAAMkB,IAAI,GAAG,IAAIC,GAAG,EAAE;EACtB,MAAMC,EAAE,GAAG,IAAIN,EAAE,CAACd,IAAI,CAAC;EACvB;AACJ;AACA;EACIoB,EAAE,CAACnB,SAAS,GAAGE,CAAC,IAAIe,IAAI,CAACG,OAAO,CAACC,GAAG,IAAIA,GAAG,CAACnB,CAAC,CAACE,IAAI,EAAE,kBAAkB,CAAC,CAAC;EACxE,OAAO;IACLe,EAAE;IAAEF;EACN,CAAC;AACH,CAAC,CAAC;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,SAAS,GAAG,CAACvB,IAAI,EAAEwB,CAAC,KAAKR,UAAU,CAAChB,IAAI,CAAC,CAACkB,IAAI,CAACO,GAAG,CAACD,CAAC,CAAC;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,WAAW,GAAG,CAAC1B,IAAI,EAAEwB,CAAC,KAAKR,UAAU,CAAChB,IAAI,CAAC,CAACkB,IAAI,CAACS,MAAM,CAACH,CAAC,CAAC;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,OAAO,GAAG,UAAC5B,IAAI,EAAEK,IAAI,EAAoB;EAAA,IAAlBwB,MAAM,uEAAG,IAAI;EAC/C,MAAMC,CAAC,GAAGd,UAAU,CAAChB,IAAI,CAAC;EAC1B8B,CAAC,CAACV,EAAE,CAACZ,WAAW,CAACH,IAAI,CAAC;EACtByB,CAAC,CAACZ,IAAI,CAACG,OAAO,CAACC,GAAG,IAAIA,GAAG,CAACjB,IAAI,EAAEwB,MAAM,CAAC,CAAC;AAC1C,CAAC"},"metadata":{},"sourceType":"module"}