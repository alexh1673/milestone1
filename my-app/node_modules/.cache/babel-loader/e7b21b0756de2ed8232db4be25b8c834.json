{"ast":null,"code":"/**\n * Utility module to work with strings.\n *\n * @module string\n */\n\nexport const fromCharCode = String.fromCharCode;\nexport const fromCodePoint = String.fromCodePoint;\n\n/**\n * @param {string} s\n * @return {string}\n */\nconst toLowerCase = s => s.toLowerCase();\nconst trimLeftRegex = /^\\s*/g;\n\n/**\n * @param {string} s\n * @return {string}\n */\nexport const trimLeft = s => s.replace(trimLeftRegex, '');\nconst fromCamelCaseRegex = /([A-Z])/g;\n\n/**\n * @param {string} s\n * @param {string} separator\n * @return {string}\n */\nexport const fromCamelCase = (s, separator) => trimLeft(s.replace(fromCamelCaseRegex, match => `${separator}${toLowerCase(match)}`));\n\n/**\n * Compute the utf8ByteLength\n * @param {string} str\n * @return {number}\n */\nexport const utf8ByteLength = str => unescape(encodeURIComponent(str)).length;\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\nexport const _encodeUtf8Polyfill = str => {\n  const encodedString = unescape(encodeURIComponent(str));\n  const len = encodedString.length;\n  const buf = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    buf[i] = /** @type {number} */encodedString.codePointAt(i);\n  }\n  return buf;\n};\n\n/* istanbul ignore next */\nexport const utf8TextEncoder = /** @type {TextEncoder} */typeof TextEncoder !== 'undefined' ? new TextEncoder() : null;\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\nexport const _encodeUtf8Native = str => utf8TextEncoder.encode(str);\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\n/* istanbul ignore next */\nexport const encodeUtf8 = utf8TextEncoder ? _encodeUtf8Native : _encodeUtf8Polyfill;\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\nexport const _decodeUtf8Polyfill = buf => {\n  let remainingLen = buf.length;\n  let encodedString = '';\n  let bufPos = 0;\n  while (remainingLen > 0) {\n    const nextLen = remainingLen < 10000 ? remainingLen : 10000;\n    const bytes = buf.subarray(bufPos, bufPos + nextLen);\n    bufPos += nextLen;\n    // Starting with ES5.1 we can supply a generic array-like object as arguments\n    encodedString += String.fromCodePoint.apply(null, /** @type {any} */bytes);\n    remainingLen -= nextLen;\n  }\n  return decodeURIComponent(escape(encodedString));\n};\n\n/* istanbul ignore next */\nexport let utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf-8', {\n  fatal: true,\n  ignoreBOM: true\n});\n\n/* istanbul ignore next */\nif (utf8TextDecoder && utf8TextDecoder.decode(new Uint8Array()).length === 1) {\n  // Safari doesn't handle BOM correctly.\n  // This fixes a bug in Safari 13.0.5 where it produces a BOM the first time it is called.\n  // utf8TextDecoder.decode(new Uint8Array()).length === 1 on the first call and\n  // utf8TextDecoder.decode(new Uint8Array()).length === 1 on the second call\n  // Another issue is that from then on no BOM chars are recognized anymore\n  /* istanbul ignore next */\n  utf8TextDecoder = null;\n}\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\nexport const _decodeUtf8Native = buf => /** @type {TextDecoder} */utf8TextDecoder.decode(buf);\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\n/* istanbul ignore next */\nexport const decodeUtf8 = utf8TextDecoder ? _decodeUtf8Native : _decodeUtf8Polyfill;\n\n/**\n * @param {string} str The initial string\n * @param {number} index Starting position\n * @param {number} remove Number of characters to remove\n * @param {string} insert New content to insert\n */\nexport const splice = function (str, index, remove) {\n  let insert = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  return str.slice(0, index) + insert + str.slice(index + remove);\n};","map":{"version":3,"names":["fromCharCode","String","fromCodePoint","toLowerCase","s","trimLeftRegex","trimLeft","replace","fromCamelCaseRegex","fromCamelCase","separator","match","utf8ByteLength","str","unescape","encodeURIComponent","length","_encodeUtf8Polyfill","encodedString","len","buf","Uint8Array","i","codePointAt","utf8TextEncoder","TextEncoder","_encodeUtf8Native","encode","encodeUtf8","_decodeUtf8Polyfill","remainingLen","bufPos","nextLen","bytes","subarray","apply","decodeURIComponent","escape","utf8TextDecoder","TextDecoder","fatal","ignoreBOM","decode","_decodeUtf8Native","decodeUtf8","splice","index","remove","insert","slice"],"sources":["/root/ms1/node_modules/lib0/string.js"],"sourcesContent":["/**\n * Utility module to work with strings.\n *\n * @module string\n */\n\nexport const fromCharCode = String.fromCharCode\nexport const fromCodePoint = String.fromCodePoint\n\n/**\n * @param {string} s\n * @return {string}\n */\nconst toLowerCase = s => s.toLowerCase()\n\nconst trimLeftRegex = /^\\s*/g\n\n/**\n * @param {string} s\n * @return {string}\n */\nexport const trimLeft = s => s.replace(trimLeftRegex, '')\n\nconst fromCamelCaseRegex = /([A-Z])/g\n\n/**\n * @param {string} s\n * @param {string} separator\n * @return {string}\n */\nexport const fromCamelCase = (s, separator) => trimLeft(s.replace(fromCamelCaseRegex, match => `${separator}${toLowerCase(match)}`))\n\n/**\n * Compute the utf8ByteLength\n * @param {string} str\n * @return {number}\n */\nexport const utf8ByteLength = str => unescape(encodeURIComponent(str)).length\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\nexport const _encodeUtf8Polyfill = str => {\n  const encodedString = unescape(encodeURIComponent(str))\n  const len = encodedString.length\n  const buf = new Uint8Array(len)\n  for (let i = 0; i < len; i++) {\n    buf[i] = /** @type {number} */ (encodedString.codePointAt(i))\n  }\n  return buf\n}\n\n/* istanbul ignore next */\nexport const utf8TextEncoder = /** @type {TextEncoder} */ (typeof TextEncoder !== 'undefined' ? new TextEncoder() : null)\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\nexport const _encodeUtf8Native = str => utf8TextEncoder.encode(str)\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\n/* istanbul ignore next */\nexport const encodeUtf8 = utf8TextEncoder ? _encodeUtf8Native : _encodeUtf8Polyfill\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\nexport const _decodeUtf8Polyfill = buf => {\n  let remainingLen = buf.length\n  let encodedString = ''\n  let bufPos = 0\n  while (remainingLen > 0) {\n    const nextLen = remainingLen < 10000 ? remainingLen : 10000\n    const bytes = buf.subarray(bufPos, bufPos + nextLen)\n    bufPos += nextLen\n    // Starting with ES5.1 we can supply a generic array-like object as arguments\n    encodedString += String.fromCodePoint.apply(null, /** @type {any} */ (bytes))\n    remainingLen -= nextLen\n  }\n  return decodeURIComponent(escape(encodedString))\n}\n\n/* istanbul ignore next */\nexport let utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf-8', { fatal: true, ignoreBOM: true })\n\n/* istanbul ignore next */\nif (utf8TextDecoder && utf8TextDecoder.decode(new Uint8Array()).length === 1) {\n  // Safari doesn't handle BOM correctly.\n  // This fixes a bug in Safari 13.0.5 where it produces a BOM the first time it is called.\n  // utf8TextDecoder.decode(new Uint8Array()).length === 1 on the first call and\n  // utf8TextDecoder.decode(new Uint8Array()).length === 1 on the second call\n  // Another issue is that from then on no BOM chars are recognized anymore\n  /* istanbul ignore next */\n  utf8TextDecoder = null\n}\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\nexport const _decodeUtf8Native = buf => /** @type {TextDecoder} */ (utf8TextDecoder).decode(buf)\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\n/* istanbul ignore next */\nexport const decodeUtf8 = utf8TextDecoder ? _decodeUtf8Native : _decodeUtf8Polyfill\n\n/**\n * @param {string} str The initial string\n * @param {number} index Starting position\n * @param {number} remove Number of characters to remove\n * @param {string} insert New content to insert\n */\nexport const splice = (str, index, remove, insert = '') => str.slice(0, index) + insert + str.slice(index + remove)\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMA,YAAY,GAAGC,MAAM,CAACD,YAAY;AAC/C,OAAO,MAAME,aAAa,GAAGD,MAAM,CAACC,aAAa;;AAEjD;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAGC,CAAC,IAAIA,CAAC,CAACD,WAAW,EAAE;AAExC,MAAME,aAAa,GAAG,OAAO;;AAE7B;AACA;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAGF,CAAC,IAAIA,CAAC,CAACG,OAAO,CAACF,aAAa,EAAE,EAAE,CAAC;AAEzD,MAAMG,kBAAkB,GAAG,UAAU;;AAErC;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG,CAACL,CAAC,EAAEM,SAAS,KAAKJ,QAAQ,CAACF,CAAC,CAACG,OAAO,CAACC,kBAAkB,EAAEG,KAAK,IAAK,GAAED,SAAU,GAAEP,WAAW,CAACQ,KAAK,CAAE,EAAC,CAAC,CAAC;;AAEpI;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGC,GAAG,IAAIC,QAAQ,CAACC,kBAAkB,CAACF,GAAG,CAAC,CAAC,CAACG,MAAM;;AAE7E;AACA;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAGJ,GAAG,IAAI;EACxC,MAAMK,aAAa,GAAGJ,QAAQ,CAACC,kBAAkB,CAACF,GAAG,CAAC,CAAC;EACvD,MAAMM,GAAG,GAAGD,aAAa,CAACF,MAAM;EAChC,MAAMI,GAAG,GAAG,IAAIC,UAAU,CAACF,GAAG,CAAC;EAC/B,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,GAAG,EAAEG,CAAC,EAAE,EAAE;IAC5BF,GAAG,CAACE,CAAC,CAAC,GAAG,qBAAuBJ,aAAa,CAACK,WAAW,CAACD,CAAC,CAAE;EAC/D;EACA,OAAOF,GAAG;AACZ,CAAC;;AAED;AACA,OAAO,MAAMI,eAAe,GAAG,0BAA4B,OAAOC,WAAW,KAAK,WAAW,GAAG,IAAIA,WAAW,EAAE,GAAG,IAAK;;AAEzH;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAGb,GAAG,IAAIW,eAAe,CAACG,MAAM,CAACd,GAAG,CAAC;;AAEnE;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMe,UAAU,GAAGJ,eAAe,GAAGE,iBAAiB,GAAGT,mBAAmB;;AAEnF;AACA;AACA;AACA;AACA,OAAO,MAAMY,mBAAmB,GAAGT,GAAG,IAAI;EACxC,IAAIU,YAAY,GAAGV,GAAG,CAACJ,MAAM;EAC7B,IAAIE,aAAa,GAAG,EAAE;EACtB,IAAIa,MAAM,GAAG,CAAC;EACd,OAAOD,YAAY,GAAG,CAAC,EAAE;IACvB,MAAME,OAAO,GAAGF,YAAY,GAAG,KAAK,GAAGA,YAAY,GAAG,KAAK;IAC3D,MAAMG,KAAK,GAAGb,GAAG,CAACc,QAAQ,CAACH,MAAM,EAAEA,MAAM,GAAGC,OAAO,CAAC;IACpDD,MAAM,IAAIC,OAAO;IACjB;IACAd,aAAa,IAAIjB,MAAM,CAACC,aAAa,CAACiC,KAAK,CAAC,IAAI,EAAE,kBAAoBF,KAAK,CAAE;IAC7EH,YAAY,IAAIE,OAAO;EACzB;EACA,OAAOI,kBAAkB,CAACC,MAAM,CAACnB,aAAa,CAAC,CAAC;AAClD,CAAC;;AAED;AACA,OAAO,IAAIoB,eAAe,GAAG,OAAOC,WAAW,KAAK,WAAW,GAAG,IAAI,GAAG,IAAIA,WAAW,CAAC,OAAO,EAAE;EAAEC,KAAK,EAAE,IAAI;EAAEC,SAAS,EAAE;AAAK,CAAC,CAAC;;AAEnI;AACA,IAAIH,eAAe,IAAIA,eAAe,CAACI,MAAM,CAAC,IAAIrB,UAAU,EAAE,CAAC,CAACL,MAAM,KAAK,CAAC,EAAE;EAC5E;EACA;EACA;EACA;EACA;EACA;EACAsB,eAAe,GAAG,IAAI;AACxB;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMK,iBAAiB,GAAGvB,GAAG,IAAI,0BAA4BkB,eAAe,CAAEI,MAAM,CAACtB,GAAG,CAAC;;AAEhG;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMwB,UAAU,GAAGN,eAAe,GAAGK,iBAAiB,GAAGd,mBAAmB;;AAEnF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMgB,MAAM,GAAG,UAAChC,GAAG,EAAEiC,KAAK,EAAEC,MAAM;EAAA,IAAEC,MAAM,uEAAG,EAAE;EAAA,OAAKnC,GAAG,CAACoC,KAAK,CAAC,CAAC,EAAEH,KAAK,CAAC,GAAGE,MAAM,GAAGnC,GAAG,CAACoC,KAAK,CAACH,KAAK,GAAGC,MAAM,CAAC;AAAA"},"metadata":{},"sourceType":"module"}