{"ast":null,"code":"/* eslint-env browser */\n\n/**\n * Utility module to work with the DOM.\n *\n * @module dom\n */\n\nimport * as pair from './pair.js';\nimport * as map from './map.js';\n\n/* istanbul ignore next */\n/**\n * @type {Document}\n */\nexport const doc = /** @type {Document} */typeof document !== 'undefined' ? document : {};\n\n/**\n * @param {string} name\n * @return {HTMLElement}\n */\n/* istanbul ignore next */\nexport const createElement = name => doc.createElement(name);\n\n/**\n * @return {DocumentFragment}\n */\n/* istanbul ignore next */\nexport const createDocumentFragment = () => doc.createDocumentFragment();\n\n/**\n * @param {string} text\n * @return {Text}\n */\n/* istanbul ignore next */\nexport const createTextNode = text => doc.createTextNode(text);\n\n/* istanbul ignore next */\nexport const domParser = /** @type {DOMParser} */typeof DOMParser !== 'undefined' ? new DOMParser() : null;\n\n/**\n * @param {HTMLElement} el\n * @param {string} name\n * @param {Object} opts\n */\n/* istanbul ignore next */\nexport const emitCustomEvent = (el, name, opts) => el.dispatchEvent(new CustomEvent(name, opts));\n\n/**\n * @param {Element} el\n * @param {Array<pair.Pair<string,string|boolean>>} attrs Array of key-value pairs\n * @return {Element}\n */\n/* istanbul ignore next */\nexport const setAttributes = (el, attrs) => {\n  pair.forEach(attrs, (key, value) => {\n    if (value === false) {\n      el.removeAttribute(key);\n    } else if (value === true) {\n      el.setAttribute(key, '');\n    } else {\n      // @ts-ignore\n      el.setAttribute(key, value);\n    }\n  });\n  return el;\n};\n\n/**\n * @param {Element} el\n * @param {Map<string, string>} attrs Array of key-value pairs\n * @return {Element}\n */\n/* istanbul ignore next */\nexport const setAttributesMap = (el, attrs) => {\n  attrs.forEach((value, key) => {\n    el.setAttribute(key, value);\n  });\n  return el;\n};\n\n/**\n * @param {Array<Node>|HTMLCollection} children\n * @return {DocumentFragment}\n */\n/* istanbul ignore next */\nexport const fragment = children => {\n  const fragment = createDocumentFragment();\n  for (let i = 0; i < children.length; i++) {\n    appendChild(fragment, children[i]);\n  }\n  return fragment;\n};\n\n/**\n * @param {Element} parent\n * @param {Array<Node>} nodes\n * @return {Element}\n */\n/* istanbul ignore next */\nexport const append = (parent, nodes) => {\n  appendChild(parent, fragment(nodes));\n  return parent;\n};\n\n/**\n * @param {HTMLElement} el\n */\n/* istanbul ignore next */\nexport const remove = el => el.remove();\n\n/**\n * @param {EventTarget} el\n * @param {string} name\n * @param {EventListener} f\n */\n/* istanbul ignore next */\nexport const addEventListener = (el, name, f) => el.addEventListener(name, f);\n\n/**\n * @param {EventTarget} el\n * @param {string} name\n * @param {EventListener} f\n */\n/* istanbul ignore next */\nexport const removeEventListener = (el, name, f) => el.removeEventListener(name, f);\n\n/**\n * @param {Node} node\n * @param {Array<pair.Pair<string,EventListener>>} listeners\n * @return {Node}\n */\n/* istanbul ignore next */\nexport const addEventListeners = (node, listeners) => {\n  pair.forEach(listeners, (name, f) => addEventListener(node, name, f));\n  return node;\n};\n\n/**\n * @param {Node} node\n * @param {Array<pair.Pair<string,EventListener>>} listeners\n * @return {Node}\n */\n/* istanbul ignore next */\nexport const removeEventListeners = (node, listeners) => {\n  pair.forEach(listeners, (name, f) => removeEventListener(node, name, f));\n  return node;\n};\n\n/**\n * @param {string} name\n * @param {Array<pair.Pair<string,string>|pair.Pair<string,boolean>>} attrs Array of key-value pairs\n * @param {Array<Node>} children\n * @return {Element}\n */\n/* istanbul ignore next */\nexport const element = function (name) {\n  let attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  return append(setAttributes(createElement(name), attrs), children);\n};\n\n/**\n * @param {number} width\n * @param {number} height\n */\n/* istanbul ignore next */\nexport const canvas = (width, height) => {\n  const c = /** @type {HTMLCanvasElement} */createElement('canvas');\n  c.height = height;\n  c.width = width;\n  return c;\n};\n\n/**\n * @param {string} t\n * @return {Text}\n */\n/* istanbul ignore next */\nexport const text = createTextNode;\n\n/**\n * @param {pair.Pair<string,string>} pair\n */\n/* istanbul ignore next */\nexport const pairToStyleString = pair => `${pair.left}:${pair.right};`;\n\n/**\n * @param {Array<pair.Pair<string,string>>} pairs\n * @return {string}\n */\n/* istanbul ignore next */\nexport const pairsToStyleString = pairs => pairs.map(pairToStyleString).join('');\n\n/**\n * @param {Map<string,string>} m\n * @return {string}\n */\n/* istanbul ignore next */\nexport const mapToStyleString = m => map.map(m, (value, key) => `${key}:${value};`).join('');\n\n/**\n * @todo should always query on a dom element\n *\n * @param {HTMLElement|ShadowRoot} el\n * @param {string} query\n * @return {HTMLElement | null}\n */\n/* istanbul ignore next */\nexport const querySelector = (el, query) => el.querySelector(query);\n\n/**\n * @param {HTMLElement|ShadowRoot} el\n * @param {string} query\n * @return {NodeListOf<HTMLElement>}\n */\n/* istanbul ignore next */\nexport const querySelectorAll = (el, query) => el.querySelectorAll(query);\n\n/**\n * @param {string} id\n * @return {HTMLElement}\n */\n/* istanbul ignore next */\nexport const getElementById = id => /** @type {HTMLElement} */doc.getElementById(id);\n\n/**\n * @param {string} html\n * @return {HTMLElement}\n */\n/* istanbul ignore next */\nconst _parse = html => domParser.parseFromString(`<html><body>${html}</body></html>`, 'text/html').body;\n\n/**\n * @param {string} html\n * @return {DocumentFragment}\n */\n/* istanbul ignore next */\nexport const parseFragment = html => fragment( /** @type {any} */_parse(html).childNodes);\n\n/**\n * @param {string} html\n * @return {HTMLElement}\n */\n/* istanbul ignore next */\nexport const parseElement = html => /** @type HTMLElement */_parse(html).firstElementChild;\n\n/**\n * @param {HTMLElement} oldEl\n * @param {HTMLElement|DocumentFragment} newEl\n */\n/* istanbul ignore next */\nexport const replaceWith = (oldEl, newEl) => oldEl.replaceWith(newEl);\n\n/**\n * @param {HTMLElement} parent\n * @param {HTMLElement} el\n * @param {Node|null} ref\n * @return {HTMLElement}\n */\n/* istanbul ignore next */\nexport const insertBefore = (parent, el, ref) => parent.insertBefore(el, ref);\n\n/**\n * @param {Node} parent\n * @param {Node} child\n * @return {Node}\n */\n/* istanbul ignore next */\nexport const appendChild = (parent, child) => parent.appendChild(child);\nexport const ELEMENT_NODE = doc.ELEMENT_NODE;\nexport const TEXT_NODE = doc.TEXT_NODE;\nexport const CDATA_SECTION_NODE = doc.CDATA_SECTION_NODE;\nexport const COMMENT_NODE = doc.COMMENT_NODE;\nexport const DOCUMENT_NODE = doc.DOCUMENT_NODE;\nexport const DOCUMENT_TYPE_NODE = doc.DOCUMENT_TYPE_NODE;\nexport const DOCUMENT_FRAGMENT_NODE = doc.DOCUMENT_FRAGMENT_NODE;\n\n/**\n * @param {any} node\n * @param {number} type\n */\nexport const checkNodeType = (node, type) => node.nodeType === type;\n\n/**\n * @param {Node} parent\n * @param {HTMLElement} child\n */\nexport const isParentOf = (parent, child) => {\n  let p = child.parentNode;\n  while (p && p !== parent) {\n    p = p.parentNode;\n  }\n  return p === parent;\n};","map":{"version":3,"names":["pair","map","doc","document","createElement","name","createDocumentFragment","createTextNode","text","domParser","DOMParser","emitCustomEvent","el","opts","dispatchEvent","CustomEvent","setAttributes","attrs","forEach","key","value","removeAttribute","setAttribute","setAttributesMap","fragment","children","i","length","appendChild","append","parent","nodes","remove","addEventListener","f","removeEventListener","addEventListeners","node","listeners","removeEventListeners","element","canvas","width","height","c","pairToStyleString","left","right","pairsToStyleString","pairs","join","mapToStyleString","m","querySelector","query","querySelectorAll","getElementById","id","_parse","html","parseFromString","body","parseFragment","childNodes","parseElement","firstElementChild","replaceWith","oldEl","newEl","insertBefore","ref","child","ELEMENT_NODE","TEXT_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_NODE","DOCUMENT_TYPE_NODE","DOCUMENT_FRAGMENT_NODE","checkNodeType","type","nodeType","isParentOf","p","parentNode"],"sources":["/root/ms1/node_modules/lib0/dom.js"],"sourcesContent":["/* eslint-env browser */\n\n/**\n * Utility module to work with the DOM.\n *\n * @module dom\n */\n\nimport * as pair from './pair.js'\nimport * as map from './map.js'\n\n/* istanbul ignore next */\n/**\n * @type {Document}\n */\nexport const doc = /** @type {Document} */ (typeof document !== 'undefined' ? document : {})\n\n/**\n * @param {string} name\n * @return {HTMLElement}\n */\n/* istanbul ignore next */\nexport const createElement = name => doc.createElement(name)\n\n/**\n * @return {DocumentFragment}\n */\n/* istanbul ignore next */\nexport const createDocumentFragment = () => doc.createDocumentFragment()\n\n/**\n * @param {string} text\n * @return {Text}\n */\n/* istanbul ignore next */\nexport const createTextNode = text => doc.createTextNode(text)\n\n/* istanbul ignore next */\nexport const domParser = /** @type {DOMParser} */ (typeof DOMParser !== 'undefined' ? new DOMParser() : null)\n\n/**\n * @param {HTMLElement} el\n * @param {string} name\n * @param {Object} opts\n */\n/* istanbul ignore next */\nexport const emitCustomEvent = (el, name, opts) => el.dispatchEvent(new CustomEvent(name, opts))\n\n/**\n * @param {Element} el\n * @param {Array<pair.Pair<string,string|boolean>>} attrs Array of key-value pairs\n * @return {Element}\n */\n/* istanbul ignore next */\nexport const setAttributes = (el, attrs) => {\n  pair.forEach(attrs, (key, value) => {\n    if (value === false) {\n      el.removeAttribute(key)\n    } else if (value === true) {\n      el.setAttribute(key, '')\n    } else {\n      // @ts-ignore\n      el.setAttribute(key, value)\n    }\n  })\n  return el\n}\n\n/**\n * @param {Element} el\n * @param {Map<string, string>} attrs Array of key-value pairs\n * @return {Element}\n */\n/* istanbul ignore next */\nexport const setAttributesMap = (el, attrs) => {\n  attrs.forEach((value, key) => { el.setAttribute(key, value) })\n  return el\n}\n\n/**\n * @param {Array<Node>|HTMLCollection} children\n * @return {DocumentFragment}\n */\n/* istanbul ignore next */\nexport const fragment = children => {\n  const fragment = createDocumentFragment()\n  for (let i = 0; i < children.length; i++) {\n    appendChild(fragment, children[i])\n  }\n  return fragment\n}\n\n/**\n * @param {Element} parent\n * @param {Array<Node>} nodes\n * @return {Element}\n */\n/* istanbul ignore next */\nexport const append = (parent, nodes) => {\n  appendChild(parent, fragment(nodes))\n  return parent\n}\n\n/**\n * @param {HTMLElement} el\n */\n/* istanbul ignore next */\nexport const remove = el => el.remove()\n\n/**\n * @param {EventTarget} el\n * @param {string} name\n * @param {EventListener} f\n */\n/* istanbul ignore next */\nexport const addEventListener = (el, name, f) => el.addEventListener(name, f)\n\n/**\n * @param {EventTarget} el\n * @param {string} name\n * @param {EventListener} f\n */\n/* istanbul ignore next */\nexport const removeEventListener = (el, name, f) => el.removeEventListener(name, f)\n\n/**\n * @param {Node} node\n * @param {Array<pair.Pair<string,EventListener>>} listeners\n * @return {Node}\n */\n/* istanbul ignore next */\nexport const addEventListeners = (node, listeners) => {\n  pair.forEach(listeners, (name, f) => addEventListener(node, name, f))\n  return node\n}\n\n/**\n * @param {Node} node\n * @param {Array<pair.Pair<string,EventListener>>} listeners\n * @return {Node}\n */\n/* istanbul ignore next */\nexport const removeEventListeners = (node, listeners) => {\n  pair.forEach(listeners, (name, f) => removeEventListener(node, name, f))\n  return node\n}\n\n/**\n * @param {string} name\n * @param {Array<pair.Pair<string,string>|pair.Pair<string,boolean>>} attrs Array of key-value pairs\n * @param {Array<Node>} children\n * @return {Element}\n */\n/* istanbul ignore next */\nexport const element = (name, attrs = [], children = []) =>\n  append(setAttributes(createElement(name), attrs), children)\n\n/**\n * @param {number} width\n * @param {number} height\n */\n/* istanbul ignore next */\nexport const canvas = (width, height) => {\n  const c = /** @type {HTMLCanvasElement} */ (createElement('canvas'))\n  c.height = height\n  c.width = width\n  return c\n}\n\n/**\n * @param {string} t\n * @return {Text}\n */\n/* istanbul ignore next */\nexport const text = createTextNode\n\n/**\n * @param {pair.Pair<string,string>} pair\n */\n/* istanbul ignore next */\nexport const pairToStyleString = pair => `${pair.left}:${pair.right};`\n\n/**\n * @param {Array<pair.Pair<string,string>>} pairs\n * @return {string}\n */\n/* istanbul ignore next */\nexport const pairsToStyleString = pairs => pairs.map(pairToStyleString).join('')\n\n/**\n * @param {Map<string,string>} m\n * @return {string}\n */\n/* istanbul ignore next */\nexport const mapToStyleString = m => map.map(m, (value, key) => `${key}:${value};`).join('')\n\n/**\n * @todo should always query on a dom element\n *\n * @param {HTMLElement|ShadowRoot} el\n * @param {string} query\n * @return {HTMLElement | null}\n */\n/* istanbul ignore next */\nexport const querySelector = (el, query) => el.querySelector(query)\n\n/**\n * @param {HTMLElement|ShadowRoot} el\n * @param {string} query\n * @return {NodeListOf<HTMLElement>}\n */\n/* istanbul ignore next */\nexport const querySelectorAll = (el, query) => el.querySelectorAll(query)\n\n/**\n * @param {string} id\n * @return {HTMLElement}\n */\n/* istanbul ignore next */\nexport const getElementById = id => /** @type {HTMLElement} */ (doc.getElementById(id))\n\n/**\n * @param {string} html\n * @return {HTMLElement}\n */\n/* istanbul ignore next */\nconst _parse = html => domParser.parseFromString(`<html><body>${html}</body></html>`, 'text/html').body\n\n/**\n * @param {string} html\n * @return {DocumentFragment}\n */\n/* istanbul ignore next */\nexport const parseFragment = html => fragment(/** @type {any} */ (_parse(html).childNodes))\n\n/**\n * @param {string} html\n * @return {HTMLElement}\n */\n/* istanbul ignore next */\nexport const parseElement = html => /** @type HTMLElement */ (_parse(html).firstElementChild)\n\n/**\n * @param {HTMLElement} oldEl\n * @param {HTMLElement|DocumentFragment} newEl\n */\n/* istanbul ignore next */\nexport const replaceWith = (oldEl, newEl) => oldEl.replaceWith(newEl)\n\n/**\n * @param {HTMLElement} parent\n * @param {HTMLElement} el\n * @param {Node|null} ref\n * @return {HTMLElement}\n */\n/* istanbul ignore next */\nexport const insertBefore = (parent, el, ref) => parent.insertBefore(el, ref)\n\n/**\n * @param {Node} parent\n * @param {Node} child\n * @return {Node}\n */\n/* istanbul ignore next */\nexport const appendChild = (parent, child) => parent.appendChild(child)\n\nexport const ELEMENT_NODE = doc.ELEMENT_NODE\nexport const TEXT_NODE = doc.TEXT_NODE\nexport const CDATA_SECTION_NODE = doc.CDATA_SECTION_NODE\nexport const COMMENT_NODE = doc.COMMENT_NODE\nexport const DOCUMENT_NODE = doc.DOCUMENT_NODE\nexport const DOCUMENT_TYPE_NODE = doc.DOCUMENT_TYPE_NODE\nexport const DOCUMENT_FRAGMENT_NODE = doc.DOCUMENT_FRAGMENT_NODE\n\n/**\n * @param {any} node\n * @param {number} type\n */\nexport const checkNodeType = (node, type) => node.nodeType === type\n\n/**\n * @param {Node} parent\n * @param {HTMLElement} child\n */\nexport const isParentOf = (parent, child) => {\n  let p = child.parentNode\n  while (p && p !== parent) {\n    p = p.parentNode\n  }\n  return p === parent\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}