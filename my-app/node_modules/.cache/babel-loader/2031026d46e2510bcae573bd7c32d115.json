{"ast":null,"code":"/**\n * Efficient schema-less binary encoding with support for variable length encoding.\n *\n * Use [lib0/encoding] with [lib0/decoding]. Every encoding function has a corresponding decoding function.\n *\n * Encodes numbers in little-endian order (least to most significant byte order)\n * and is compatible with Golang's binary encoding (https://golang.org/pkg/encoding/binary/)\n * which is also used in Protocol Buffers.\n *\n * ```js\n * // encoding step\n * const encoder = new encoding.createEncoder()\n * encoding.writeVarUint(encoder, 256)\n * encoding.writeVarString(encoder, 'Hello world!')\n * const buf = encoding.toUint8Array(encoder)\n * ```\n *\n * ```js\n * // decoding step\n * const decoder = new decoding.createDecoder(buf)\n * decoding.readVarUint(decoder) // => 256\n * decoding.readVarString(decoder) // => 'Hello world!'\n * decoding.hasContent(decoder) // => false - all data is read\n * ```\n *\n * @module encoding\n */\n\nimport * as buffer from './buffer.js';\nimport * as math from './math.js';\nimport * as number from './number.js';\nimport * as binary from './binary.js';\nimport * as string from './string.js';\n\n/**\n * A BinaryEncoder handles the encoding to an Uint8Array.\n */\nexport class Encoder {\n  constructor() {\n    this.cpos = 0;\n    this.cbuf = new Uint8Array(100);\n    /**\n     * @type {Array<Uint8Array>}\n     */\n    this.bufs = [];\n  }\n}\n\n/**\n * @function\n * @return {Encoder}\n */\nexport const createEncoder = () => new Encoder();\n\n/**\n * The current length of the encoded data.\n *\n * @function\n * @param {Encoder} encoder\n * @return {number}\n */\nexport const length = encoder => {\n  let len = encoder.cpos;\n  for (let i = 0; i < encoder.bufs.length; i++) {\n    len += encoder.bufs[i].length;\n  }\n  return len;\n};\n\n/**\n * Transform to Uint8Array.\n *\n * @function\n * @param {Encoder} encoder\n * @return {Uint8Array} The created ArrayBuffer.\n */\nexport const toUint8Array = encoder => {\n  const uint8arr = new Uint8Array(length(encoder));\n  let curPos = 0;\n  for (let i = 0; i < encoder.bufs.length; i++) {\n    const d = encoder.bufs[i];\n    uint8arr.set(d, curPos);\n    curPos += d.length;\n  }\n  uint8arr.set(buffer.createUint8ArrayViewFromArrayBuffer(encoder.cbuf.buffer, 0, encoder.cpos), curPos);\n  return uint8arr;\n};\n\n/**\n * Verify that it is possible to write `len` bytes wtihout checking. If\n * necessary, a new Buffer with the required length is attached.\n *\n * @param {Encoder} encoder\n * @param {number} len\n */\nexport const verifyLen = (encoder, len) => {\n  const bufferLen = encoder.cbuf.length;\n  if (bufferLen - encoder.cpos < len) {\n    encoder.bufs.push(buffer.createUint8ArrayViewFromArrayBuffer(encoder.cbuf.buffer, 0, encoder.cpos));\n    encoder.cbuf = new Uint8Array(math.max(bufferLen, len) * 2);\n    encoder.cpos = 0;\n  }\n};\n\n/**\n * Write one byte to the encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The byte that is to be encoded.\n */\nexport const write = (encoder, num) => {\n  const bufferLen = encoder.cbuf.length;\n  if (encoder.cpos === bufferLen) {\n    encoder.bufs.push(encoder.cbuf);\n    encoder.cbuf = new Uint8Array(bufferLen * 2);\n    encoder.cpos = 0;\n  }\n  encoder.cbuf[encoder.cpos++] = num;\n};\n\n/**\n * Write one byte at a specific position.\n * Position must already be written (i.e. encoder.length > pos)\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} pos Position to which to write data\n * @param {number} num Unsigned 8-bit integer\n */\nexport const set = (encoder, pos, num) => {\n  let buffer = null;\n  // iterate all buffers and adjust position\n  for (let i = 0; i < encoder.bufs.length && buffer === null; i++) {\n    const b = encoder.bufs[i];\n    if (pos < b.length) {\n      buffer = b; // found buffer\n    } else {\n      pos -= b.length;\n    }\n  }\n  if (buffer === null) {\n    // use current buffer\n    buffer = encoder.cbuf;\n  }\n  buffer[pos] = num;\n};\n\n/**\n * Write one byte as an unsigned integer.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeUint8 = write;\n\n/**\n * Write one byte as an unsigned Integer at a specific location.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} pos The location where the data will be written.\n * @param {number} num The number that is to be encoded.\n */\nexport const setUint8 = set;\n\n/**\n * Write two bytes as an unsigned integer.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeUint16 = (encoder, num) => {\n  write(encoder, num & binary.BITS8);\n  write(encoder, num >>> 8 & binary.BITS8);\n};\n/**\n * Write two bytes as an unsigned integer at a specific location.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} pos The location where the data will be written.\n * @param {number} num The number that is to be encoded.\n */\nexport const setUint16 = (encoder, pos, num) => {\n  set(encoder, pos, num & binary.BITS8);\n  set(encoder, pos + 1, num >>> 8 & binary.BITS8);\n};\n\n/**\n * Write two bytes as an unsigned integer\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeUint32 = (encoder, num) => {\n  for (let i = 0; i < 4; i++) {\n    write(encoder, num & binary.BITS8);\n    num >>>= 8;\n  }\n};\n\n/**\n * Write two bytes as an unsigned integer in big endian order.\n * (most significant byte first)\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeUint32BigEndian = (encoder, num) => {\n  for (let i = 3; i >= 0; i--) {\n    write(encoder, num >>> 8 * i & binary.BITS8);\n  }\n};\n\n/**\n * Write two bytes as an unsigned integer at a specific location.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} pos The location where the data will be written.\n * @param {number} num The number that is to be encoded.\n */\nexport const setUint32 = (encoder, pos, num) => {\n  for (let i = 0; i < 4; i++) {\n    set(encoder, pos + i, num & binary.BITS8);\n    num >>>= 8;\n  }\n};\n\n/**\n * Write a variable length unsigned integer. Max encodable integer is 2^53.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeVarUint = (encoder, num) => {\n  while (num > binary.BITS7) {\n    write(encoder, binary.BIT8 | binary.BITS7 & num);\n    num = math.floor(num / 128); // shift >>> 7\n  }\n\n  write(encoder, binary.BITS7 & num);\n};\n\n/**\n * Write a variable length integer.\n *\n * We use the 7th bit instead for signaling that this is a negative number.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeVarInt = (encoder, num) => {\n  const isNegative = math.isNegativeZero(num);\n  if (isNegative) {\n    num = -num;\n  }\n  //             |- whether to continue reading         |- whether is negative     |- number\n  write(encoder, (num > binary.BITS6 ? binary.BIT8 : 0) | (isNegative ? binary.BIT7 : 0) | binary.BITS6 & num);\n  num = math.floor(num / 64); // shift >>> 6\n  // We don't need to consider the case of num === 0 so we can use a different\n  // pattern here than above.\n  while (num > 0) {\n    write(encoder, (num > binary.BITS7 ? binary.BIT8 : 0) | binary.BITS7 & num);\n    num = math.floor(num / 128); // shift >>> 7\n  }\n};\n\n/**\n * A cache to store strings temporarily\n */\nconst _strBuffer = new Uint8Array(30000);\nconst _maxStrBSize = _strBuffer.length / 3;\n\n/**\n * Write a variable length string.\n *\n * @function\n * @param {Encoder} encoder\n * @param {String} str The string that is to be encoded.\n */\nexport const _writeVarStringNative = (encoder, str) => {\n  if (str.length < _maxStrBSize) {\n    // We can encode the string into the existing buffer\n    /* istanbul ignore else */\n    const written = string.utf8TextEncoder.encodeInto(str, _strBuffer).written || 0;\n    writeVarUint(encoder, written);\n    for (let i = 0; i < written; i++) {\n      write(encoder, _strBuffer[i]);\n    }\n  } else {\n    writeVarUint8Array(encoder, string.encodeUtf8(str));\n  }\n};\n\n/**\n * Write a variable length string.\n *\n * @function\n * @param {Encoder} encoder\n * @param {String} str The string that is to be encoded.\n */\nexport const _writeVarStringPolyfill = (encoder, str) => {\n  const encodedString = unescape(encodeURIComponent(str));\n  const len = encodedString.length;\n  writeVarUint(encoder, len);\n  for (let i = 0; i < len; i++) {\n    write(encoder, /** @type {number} */encodedString.codePointAt(i));\n  }\n};\n\n/**\n * Write a variable length string.\n *\n * @function\n * @param {Encoder} encoder\n * @param {String} str The string that is to be encoded.\n */\n/* istanbul ignore next */\nexport const writeVarString = string.utf8TextEncoder ? _writeVarStringNative : _writeVarStringPolyfill;\n\n/**\n * Write the content of another Encoder.\n *\n * @TODO: can be improved!\n *        - Note: Should consider that when appending a lot of small Encoders, we should rather clone than referencing the old structure.\n *                Encoders start with a rather big initial buffer.\n *\n * @function\n * @param {Encoder} encoder The enUint8Arr\n * @param {Encoder} append The BinaryEncoder to be written.\n */\nexport const writeBinaryEncoder = (encoder, append) => writeUint8Array(encoder, toUint8Array(append));\n\n/**\n * Append fixed-length Uint8Array to the encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {Uint8Array} uint8Array\n */\nexport const writeUint8Array = (encoder, uint8Array) => {\n  const bufferLen = encoder.cbuf.length;\n  const cpos = encoder.cpos;\n  const leftCopyLen = math.min(bufferLen - cpos, uint8Array.length);\n  const rightCopyLen = uint8Array.length - leftCopyLen;\n  encoder.cbuf.set(uint8Array.subarray(0, leftCopyLen), cpos);\n  encoder.cpos += leftCopyLen;\n  if (rightCopyLen > 0) {\n    // Still something to write, write right half..\n    // Append new buffer\n    encoder.bufs.push(encoder.cbuf);\n    // must have at least size of remaining buffer\n    encoder.cbuf = new Uint8Array(math.max(bufferLen * 2, rightCopyLen));\n    // copy array\n    encoder.cbuf.set(uint8Array.subarray(leftCopyLen));\n    encoder.cpos = rightCopyLen;\n  }\n};\n\n/**\n * Append an Uint8Array to Encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {Uint8Array} uint8Array\n */\nexport const writeVarUint8Array = (encoder, uint8Array) => {\n  writeVarUint(encoder, uint8Array.byteLength);\n  writeUint8Array(encoder, uint8Array);\n};\n\n/**\n * Create an DataView of the next `len` bytes. Use it to write data after\n * calling this function.\n *\n * ```js\n * // write float32 using DataView\n * const dv = writeOnDataView(encoder, 4)\n * dv.setFloat32(0, 1.1)\n * // read float32 using DataView\n * const dv = readFromDataView(encoder, 4)\n * dv.getFloat32(0) // => 1.100000023841858 (leaving it to the reader to find out why this is the correct result)\n * ```\n *\n * @param {Encoder} encoder\n * @param {number} len\n * @return {DataView}\n */\nexport const writeOnDataView = (encoder, len) => {\n  verifyLen(encoder, len);\n  const dview = new DataView(encoder.cbuf.buffer, encoder.cpos, len);\n  encoder.cpos += len;\n  return dview;\n};\n\n/**\n * @param {Encoder} encoder\n * @param {number} num\n */\nexport const writeFloat32 = (encoder, num) => writeOnDataView(encoder, 4).setFloat32(0, num, false);\n\n/**\n * @param {Encoder} encoder\n * @param {number} num\n */\nexport const writeFloat64 = (encoder, num) => writeOnDataView(encoder, 8).setFloat64(0, num, false);\n\n/**\n * @param {Encoder} encoder\n * @param {bigint} num\n */\nexport const writeBigInt64 = (encoder, num) => /** @type {any} */writeOnDataView(encoder, 8).setBigInt64(0, num, false);\n\n/**\n * @param {Encoder} encoder\n * @param {bigint} num\n */\nexport const writeBigUint64 = (encoder, num) => /** @type {any} */writeOnDataView(encoder, 8).setBigUint64(0, num, false);\nconst floatTestBed = new DataView(new ArrayBuffer(4));\n/**\n * Check if a number can be encoded as a 32 bit float.\n *\n * @param {number} num\n * @return {boolean}\n */\nconst isFloat32 = num => {\n  floatTestBed.setFloat32(0, num);\n  return floatTestBed.getFloat32(0) === num;\n};\n\n/**\n * Encode data with efficient binary format.\n *\n * Differences to JSON:\n * • Transforms data to a binary format (not to a string)\n * • Encodes undefined, NaN, and ArrayBuffer (these can't be represented in JSON)\n * • Numbers are efficiently encoded either as a variable length integer, as a\n *   32 bit float, as a 64 bit float, or as a 64 bit bigint.\n *\n * Encoding table:\n *\n * | Data Type           | Prefix   | Encoding Method    | Comment |\n * | ------------------- | -------- | ------------------ | ------- |\n * | undefined           | 127      |                    | Functions, symbol, and everything that cannot be identified is encoded as undefined |\n * | null                | 126      |                    | |\n * | integer             | 125      | writeVarInt        | Only encodes 32 bit signed integers |\n * | float32             | 124      | writeFloat32       | |\n * | float64             | 123      | writeFloat64       | |\n * | bigint              | 122      | writeBigInt64      | |\n * | boolean (false)     | 121      |                    | True and false are different data types so we save the following byte |\n * | boolean (true)      | 120      |                    | - 0b01111000 so the last bit determines whether true or false |\n * | string              | 119      | writeVarString     | |\n * | object<string,any>  | 118      | custom             | Writes {length} then {length} key-value pairs |\n * | array<any>          | 117      | custom             | Writes {length} then {length} json values |\n * | Uint8Array          | 116      | writeVarUint8Array | We use Uint8Array for any kind of binary data |\n *\n * Reasons for the decreasing prefix:\n * We need the first bit for extendability (later we may want to encode the\n * prefix with writeVarUint). The remaining 7 bits are divided as follows:\n * [0-30]   the beginning of the data range is used for custom purposes\n *          (defined by the function that uses this library)\n * [31-127] the end of the data range is used for data encoding by\n *          lib0/encoding.js\n *\n * @param {Encoder} encoder\n * @param {undefined|null|number|bigint|boolean|string|Object<string,any>|Array<any>|Uint8Array} data\n */\nexport const writeAny = (encoder, data) => {\n  switch (typeof data) {\n    case 'string':\n      // TYPE 119: STRING\n      write(encoder, 119);\n      writeVarString(encoder, data);\n      break;\n    case 'number':\n      if (number.isInteger(data) && math.abs(data) <= binary.BITS31) {\n        // TYPE 125: INTEGER\n        write(encoder, 125);\n        writeVarInt(encoder, data);\n      } else if (isFloat32(data)) {\n        // TYPE 124: FLOAT32\n        write(encoder, 124);\n        writeFloat32(encoder, data);\n      } else {\n        // TYPE 123: FLOAT64\n        write(encoder, 123);\n        writeFloat64(encoder, data);\n      }\n      break;\n    case 'bigint':\n      // TYPE 122: BigInt\n      write(encoder, 122);\n      writeBigInt64(encoder, data);\n      break;\n    case 'object':\n      if (data === null) {\n        // TYPE 126: null\n        write(encoder, 126);\n      } else if (data instanceof Array) {\n        // TYPE 117: Array\n        write(encoder, 117);\n        writeVarUint(encoder, data.length);\n        for (let i = 0; i < data.length; i++) {\n          writeAny(encoder, data[i]);\n        }\n      } else if (data instanceof Uint8Array) {\n        // TYPE 116: ArrayBuffer\n        write(encoder, 116);\n        writeVarUint8Array(encoder, data);\n      } else {\n        // TYPE 118: Object\n        write(encoder, 118);\n        const keys = Object.keys(data);\n        writeVarUint(encoder, keys.length);\n        for (let i = 0; i < keys.length; i++) {\n          const key = keys[i];\n          writeVarString(encoder, key);\n          writeAny(encoder, data[key]);\n        }\n      }\n      break;\n    case 'boolean':\n      // TYPE 120/121: boolean (true/false)\n      write(encoder, data ? 120 : 121);\n      break;\n    default:\n      // TYPE 127: undefined\n      write(encoder, 127);\n  }\n};\n\n/**\n * Now come a few stateful encoder that have their own classes.\n */\n\n/**\n * Basic Run Length Encoder - a basic compression implementation.\n *\n * Encodes [1,1,1,7] to [1,3,7,1] (3 times 1, 1 time 7). This encoder might do more harm than good if there are a lot of values that are not repeated.\n *\n * It was originally used for image compression. Cool .. article http://csbruce.com/cbm/transactor/pdfs/trans_v7_i06.pdf\n *\n * @note T must not be null!\n *\n * @template T\n */\nexport class RleEncoder extends Encoder {\n  /**\n   * @param {function(Encoder, T):void} writer\n   */\n  constructor(writer) {\n    super();\n    /**\n     * The writer\n     */\n    this.w = writer;\n    /**\n     * Current state\n     * @type {T|null}\n     */\n    this.s = null;\n    this.count = 0;\n  }\n\n  /**\n   * @param {T} v\n   */\n  write(v) {\n    if (this.s === v) {\n      this.count++;\n    } else {\n      if (this.count > 0) {\n        // flush counter, unless this is the first value (count = 0)\n        writeVarUint(this, this.count - 1); // since count is always > 0, we can decrement by one. non-standard encoding ftw\n      }\n\n      this.count = 1;\n      // write first value\n      this.w(this, v);\n      this.s = v;\n    }\n  }\n}\n\n/**\n * Basic diff decoder using variable length encoding.\n *\n * Encodes the values [3, 1100, 1101, 1050, 0] to [3, 1097, 1, -51, -1050] using writeVarInt.\n */\nexport class IntDiffEncoder extends Encoder {\n  /**\n   * @param {number} start\n   */\n  constructor(start) {\n    super();\n    /**\n     * Current state\n     * @type {number}\n     */\n    this.s = start;\n  }\n\n  /**\n   * @param {number} v\n   */\n  write(v) {\n    writeVarInt(this, v - this.s);\n    this.s = v;\n  }\n}\n\n/**\n * A combination of IntDiffEncoder and RleEncoder.\n *\n * Basically first writes the IntDiffEncoder and then counts duplicate diffs using RleEncoding.\n *\n * Encodes the values [1,1,1,2,3,4,5,6] as [1,1,0,2,1,5] (RLE([1,0,0,1,1,1,1,1]) ⇒ RleIntDiff[1,1,0,2,1,5])\n */\nexport class RleIntDiffEncoder extends Encoder {\n  /**\n   * @param {number} start\n   */\n  constructor(start) {\n    super();\n    /**\n     * Current state\n     * @type {number}\n     */\n    this.s = start;\n    this.count = 0;\n  }\n\n  /**\n   * @param {number} v\n   */\n  write(v) {\n    if (this.s === v && this.count > 0) {\n      this.count++;\n    } else {\n      if (this.count > 0) {\n        // flush counter, unless this is the first value (count = 0)\n        writeVarUint(this, this.count - 1); // since count is always > 0, we can decrement by one. non-standard encoding ftw\n      }\n\n      this.count = 1;\n      // write first value\n      writeVarInt(this, v - this.s);\n      this.s = v;\n    }\n  }\n}\n\n/**\n * @param {UintOptRleEncoder} encoder\n */\nconst flushUintOptRleEncoder = encoder => {\n  /* istanbul ignore else */\n  if (encoder.count > 0) {\n    // flush counter, unless this is the first value (count = 0)\n    // case 1: just a single value. set sign to positive\n    // case 2: write several values. set sign to negative to indicate that there is a length coming\n    writeVarInt(encoder.encoder, encoder.count === 1 ? encoder.s : -encoder.s);\n    if (encoder.count > 1) {\n      writeVarUint(encoder.encoder, encoder.count - 2); // since count is always > 1, we can decrement by one. non-standard encoding ftw\n    }\n  }\n};\n\n/**\n * Optimized Rle encoder that does not suffer from the mentioned problem of the basic Rle encoder.\n *\n * Internally uses VarInt encoder to write unsigned integers. If the input occurs multiple times, we write\n * write it as a negative number. The UintOptRleDecoder then understands that it needs to read a count.\n *\n * Encodes [1,2,3,3,3] as [1,2,-3,3] (once 1, once 2, three times 3)\n */\nexport class UintOptRleEncoder {\n  constructor() {\n    this.encoder = new Encoder();\n    /**\n     * @type {number}\n     */\n    this.s = 0;\n    this.count = 0;\n  }\n\n  /**\n   * @param {number} v\n   */\n  write(v) {\n    if (this.s === v) {\n      this.count++;\n    } else {\n      flushUintOptRleEncoder(this);\n      this.count = 1;\n      this.s = v;\n    }\n  }\n  toUint8Array() {\n    flushUintOptRleEncoder(this);\n    return toUint8Array(this.encoder);\n  }\n}\n\n/**\n * Increasing Uint Optimized RLE Encoder\n *\n * The RLE encoder counts the number of same occurences of the same value.\n * The IncUintOptRle encoder counts if the value increases.\n * I.e. 7, 8, 9, 10 will be encoded as [-7, 4]. 1, 3, 5 will be encoded\n * as [1, 3, 5].\n */\nexport class IncUintOptRleEncoder {\n  constructor() {\n    this.encoder = new Encoder();\n    /**\n     * @type {number}\n     */\n    this.s = 0;\n    this.count = 0;\n  }\n\n  /**\n   * @param {number} v\n   */\n  write(v) {\n    if (this.s + this.count === v) {\n      this.count++;\n    } else {\n      flushUintOptRleEncoder(this);\n      this.count = 1;\n      this.s = v;\n    }\n  }\n  toUint8Array() {\n    flushUintOptRleEncoder(this);\n    return toUint8Array(this.encoder);\n  }\n}\n\n/**\n * @param {IntDiffOptRleEncoder} encoder\n */\nconst flushIntDiffOptRleEncoder = encoder => {\n  if (encoder.count > 0) {\n    //          31 bit making up the diff | wether to write the counter\n    // const encodedDiff = encoder.diff << 1 | (encoder.count === 1 ? 0 : 1)\n    const encodedDiff = encoder.diff * 2 + (encoder.count === 1 ? 0 : 1);\n    // flush counter, unless this is the first value (count = 0)\n    // case 1: just a single value. set first bit to positive\n    // case 2: write several values. set first bit to negative to indicate that there is a length coming\n    writeVarInt(encoder.encoder, encodedDiff);\n    if (encoder.count > 1) {\n      writeVarUint(encoder.encoder, encoder.count - 2); // since count is always > 1, we can decrement by one. non-standard encoding ftw\n    }\n  }\n};\n\n/**\n * A combination of the IntDiffEncoder and the UintOptRleEncoder.\n *\n * The count approach is similar to the UintDiffOptRleEncoder, but instead of using the negative bitflag, it encodes\n * in the LSB whether a count is to be read. Therefore this Encoder only supports 31 bit integers!\n *\n * Encodes [1, 2, 3, 2] as [3, 1, 6, -1] (more specifically [(1 << 1) | 1, (3 << 0) | 0, -1])\n *\n * Internally uses variable length encoding. Contrary to normal UintVar encoding, the first byte contains:\n * * 1 bit that denotes whether the next value is a count (LSB)\n * * 1 bit that denotes whether this value is negative (MSB - 1)\n * * 1 bit that denotes whether to continue reading the variable length integer (MSB)\n *\n * Therefore, only five bits remain to encode diff ranges.\n *\n * Use this Encoder only when appropriate. In most cases, this is probably a bad idea.\n */\nexport class IntDiffOptRleEncoder {\n  constructor() {\n    this.encoder = new Encoder();\n    /**\n     * @type {number}\n     */\n    this.s = 0;\n    this.count = 0;\n    this.diff = 0;\n  }\n\n  /**\n   * @param {number} v\n   */\n  write(v) {\n    if (this.diff === v - this.s) {\n      this.s = v;\n      this.count++;\n    } else {\n      flushIntDiffOptRleEncoder(this);\n      this.count = 1;\n      this.diff = v - this.s;\n      this.s = v;\n    }\n  }\n  toUint8Array() {\n    flushIntDiffOptRleEncoder(this);\n    return toUint8Array(this.encoder);\n  }\n}\n\n/**\n * Optimized String Encoder.\n *\n * Encoding many small strings in a simple Encoder is not very efficient. The function call to decode a string takes some time and creates references that must be eventually deleted.\n * In practice, when decoding several million small strings, the GC will kick in more and more often to collect orphaned string objects (or maybe there is another reason?).\n *\n * This string encoder solves the above problem. All strings are concatenated and written as a single string using a single encoding call.\n *\n * The lengths are encoded using a UintOptRleEncoder.\n */\nexport class StringEncoder {\n  constructor() {\n    /**\n     * @type {Array<string>}\n     */\n    this.sarr = [];\n    this.s = '';\n    this.lensE = new UintOptRleEncoder();\n  }\n\n  /**\n   * @param {string} string\n   */\n  write(string) {\n    this.s += string;\n    if (this.s.length > 19) {\n      this.sarr.push(this.s);\n      this.s = '';\n    }\n    this.lensE.write(string.length);\n  }\n  toUint8Array() {\n    const encoder = new Encoder();\n    this.sarr.push(this.s);\n    this.s = '';\n    writeVarString(encoder, this.sarr.join(''));\n    writeUint8Array(encoder, this.lensE.toUint8Array());\n    return toUint8Array(encoder);\n  }\n}","map":{"version":3,"names":["buffer","math","number","binary","string","Encoder","constructor","cpos","cbuf","Uint8Array","bufs","createEncoder","length","encoder","len","i","toUint8Array","uint8arr","curPos","d","set","createUint8ArrayViewFromArrayBuffer","verifyLen","bufferLen","push","max","write","num","pos","b","writeUint8","setUint8","writeUint16","BITS8","setUint16","writeUint32","writeUint32BigEndian","setUint32","writeVarUint","BITS7","BIT8","floor","writeVarInt","isNegative","isNegativeZero","BITS6","BIT7","_strBuffer","_maxStrBSize","_writeVarStringNative","str","written","utf8TextEncoder","encodeInto","writeVarUint8Array","encodeUtf8","_writeVarStringPolyfill","encodedString","unescape","encodeURIComponent","codePointAt","writeVarString","writeBinaryEncoder","append","writeUint8Array","uint8Array","leftCopyLen","min","rightCopyLen","subarray","byteLength","writeOnDataView","dview","DataView","writeFloat32","setFloat32","writeFloat64","setFloat64","writeBigInt64","setBigInt64","writeBigUint64","setBigUint64","floatTestBed","ArrayBuffer","isFloat32","getFloat32","writeAny","data","isInteger","abs","BITS31","Array","keys","Object","key","RleEncoder","writer","w","s","count","v","IntDiffEncoder","start","RleIntDiffEncoder","flushUintOptRleEncoder","UintOptRleEncoder","IncUintOptRleEncoder","flushIntDiffOptRleEncoder","encodedDiff","diff","IntDiffOptRleEncoder","StringEncoder","sarr","lensE","join"],"sources":["/root/ms1/node_modules/lib0/encoding.js"],"sourcesContent":["/**\n * Efficient schema-less binary encoding with support for variable length encoding.\n *\n * Use [lib0/encoding] with [lib0/decoding]. Every encoding function has a corresponding decoding function.\n *\n * Encodes numbers in little-endian order (least to most significant byte order)\n * and is compatible with Golang's binary encoding (https://golang.org/pkg/encoding/binary/)\n * which is also used in Protocol Buffers.\n *\n * ```js\n * // encoding step\n * const encoder = new encoding.createEncoder()\n * encoding.writeVarUint(encoder, 256)\n * encoding.writeVarString(encoder, 'Hello world!')\n * const buf = encoding.toUint8Array(encoder)\n * ```\n *\n * ```js\n * // decoding step\n * const decoder = new decoding.createDecoder(buf)\n * decoding.readVarUint(decoder) // => 256\n * decoding.readVarString(decoder) // => 'Hello world!'\n * decoding.hasContent(decoder) // => false - all data is read\n * ```\n *\n * @module encoding\n */\n\nimport * as buffer from './buffer.js'\nimport * as math from './math.js'\nimport * as number from './number.js'\nimport * as binary from './binary.js'\nimport * as string from './string.js'\n\n/**\n * A BinaryEncoder handles the encoding to an Uint8Array.\n */\nexport class Encoder {\n  constructor () {\n    this.cpos = 0\n    this.cbuf = new Uint8Array(100)\n    /**\n     * @type {Array<Uint8Array>}\n     */\n    this.bufs = []\n  }\n}\n\n/**\n * @function\n * @return {Encoder}\n */\nexport const createEncoder = () => new Encoder()\n\n/**\n * The current length of the encoded data.\n *\n * @function\n * @param {Encoder} encoder\n * @return {number}\n */\nexport const length = encoder => {\n  let len = encoder.cpos\n  for (let i = 0; i < encoder.bufs.length; i++) {\n    len += encoder.bufs[i].length\n  }\n  return len\n}\n\n/**\n * Transform to Uint8Array.\n *\n * @function\n * @param {Encoder} encoder\n * @return {Uint8Array} The created ArrayBuffer.\n */\nexport const toUint8Array = encoder => {\n  const uint8arr = new Uint8Array(length(encoder))\n  let curPos = 0\n  for (let i = 0; i < encoder.bufs.length; i++) {\n    const d = encoder.bufs[i]\n    uint8arr.set(d, curPos)\n    curPos += d.length\n  }\n  uint8arr.set(buffer.createUint8ArrayViewFromArrayBuffer(encoder.cbuf.buffer, 0, encoder.cpos), curPos)\n  return uint8arr\n}\n\n/**\n * Verify that it is possible to write `len` bytes wtihout checking. If\n * necessary, a new Buffer with the required length is attached.\n *\n * @param {Encoder} encoder\n * @param {number} len\n */\nexport const verifyLen = (encoder, len) => {\n  const bufferLen = encoder.cbuf.length\n  if (bufferLen - encoder.cpos < len) {\n    encoder.bufs.push(buffer.createUint8ArrayViewFromArrayBuffer(encoder.cbuf.buffer, 0, encoder.cpos))\n    encoder.cbuf = new Uint8Array(math.max(bufferLen, len) * 2)\n    encoder.cpos = 0\n  }\n}\n\n/**\n * Write one byte to the encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The byte that is to be encoded.\n */\nexport const write = (encoder, num) => {\n  const bufferLen = encoder.cbuf.length\n  if (encoder.cpos === bufferLen) {\n    encoder.bufs.push(encoder.cbuf)\n    encoder.cbuf = new Uint8Array(bufferLen * 2)\n    encoder.cpos = 0\n  }\n  encoder.cbuf[encoder.cpos++] = num\n}\n\n/**\n * Write one byte at a specific position.\n * Position must already be written (i.e. encoder.length > pos)\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} pos Position to which to write data\n * @param {number} num Unsigned 8-bit integer\n */\nexport const set = (encoder, pos, num) => {\n  let buffer = null\n  // iterate all buffers and adjust position\n  for (let i = 0; i < encoder.bufs.length && buffer === null; i++) {\n    const b = encoder.bufs[i]\n    if (pos < b.length) {\n      buffer = b // found buffer\n    } else {\n      pos -= b.length\n    }\n  }\n  if (buffer === null) {\n    // use current buffer\n    buffer = encoder.cbuf\n  }\n  buffer[pos] = num\n}\n\n/**\n * Write one byte as an unsigned integer.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeUint8 = write\n\n/**\n * Write one byte as an unsigned Integer at a specific location.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} pos The location where the data will be written.\n * @param {number} num The number that is to be encoded.\n */\nexport const setUint8 = set\n\n/**\n * Write two bytes as an unsigned integer.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeUint16 = (encoder, num) => {\n  write(encoder, num & binary.BITS8)\n  write(encoder, (num >>> 8) & binary.BITS8)\n}\n/**\n * Write two bytes as an unsigned integer at a specific location.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} pos The location where the data will be written.\n * @param {number} num The number that is to be encoded.\n */\nexport const setUint16 = (encoder, pos, num) => {\n  set(encoder, pos, num & binary.BITS8)\n  set(encoder, pos + 1, (num >>> 8) & binary.BITS8)\n}\n\n/**\n * Write two bytes as an unsigned integer\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeUint32 = (encoder, num) => {\n  for (let i = 0; i < 4; i++) {\n    write(encoder, num & binary.BITS8)\n    num >>>= 8\n  }\n}\n\n/**\n * Write two bytes as an unsigned integer in big endian order.\n * (most significant byte first)\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeUint32BigEndian = (encoder, num) => {\n  for (let i = 3; i >= 0; i--) {\n    write(encoder, (num >>> (8 * i)) & binary.BITS8)\n  }\n}\n\n/**\n * Write two bytes as an unsigned integer at a specific location.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} pos The location where the data will be written.\n * @param {number} num The number that is to be encoded.\n */\nexport const setUint32 = (encoder, pos, num) => {\n  for (let i = 0; i < 4; i++) {\n    set(encoder, pos + i, num & binary.BITS8)\n    num >>>= 8\n  }\n}\n\n/**\n * Write a variable length unsigned integer. Max encodable integer is 2^53.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeVarUint = (encoder, num) => {\n  while (num > binary.BITS7) {\n    write(encoder, binary.BIT8 | (binary.BITS7 & num))\n    num = math.floor(num / 128) // shift >>> 7\n  }\n  write(encoder, binary.BITS7 & num)\n}\n\n/**\n * Write a variable length integer.\n *\n * We use the 7th bit instead for signaling that this is a negative number.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeVarInt = (encoder, num) => {\n  const isNegative = math.isNegativeZero(num)\n  if (isNegative) {\n    num = -num\n  }\n  //             |- whether to continue reading         |- whether is negative     |- number\n  write(encoder, (num > binary.BITS6 ? binary.BIT8 : 0) | (isNegative ? binary.BIT7 : 0) | (binary.BITS6 & num))\n  num = math.floor(num / 64) // shift >>> 6\n  // We don't need to consider the case of num === 0 so we can use a different\n  // pattern here than above.\n  while (num > 0) {\n    write(encoder, (num > binary.BITS7 ? binary.BIT8 : 0) | (binary.BITS7 & num))\n    num = math.floor(num / 128) // shift >>> 7\n  }\n}\n\n/**\n * A cache to store strings temporarily\n */\nconst _strBuffer = new Uint8Array(30000)\nconst _maxStrBSize = _strBuffer.length / 3\n\n/**\n * Write a variable length string.\n *\n * @function\n * @param {Encoder} encoder\n * @param {String} str The string that is to be encoded.\n */\nexport const _writeVarStringNative = (encoder, str) => {\n  if (str.length < _maxStrBSize) {\n    // We can encode the string into the existing buffer\n    /* istanbul ignore else */\n    const written = string.utf8TextEncoder.encodeInto(str, _strBuffer).written || 0\n    writeVarUint(encoder, written)\n    for (let i = 0; i < written; i++) {\n      write(encoder, _strBuffer[i])\n    }\n  } else {\n    writeVarUint8Array(encoder, string.encodeUtf8(str))\n  }\n}\n\n/**\n * Write a variable length string.\n *\n * @function\n * @param {Encoder} encoder\n * @param {String} str The string that is to be encoded.\n */\nexport const _writeVarStringPolyfill = (encoder, str) => {\n  const encodedString = unescape(encodeURIComponent(str))\n  const len = encodedString.length\n  writeVarUint(encoder, len)\n  for (let i = 0; i < len; i++) {\n    write(encoder, /** @type {number} */ (encodedString.codePointAt(i)))\n  }\n}\n\n/**\n * Write a variable length string.\n *\n * @function\n * @param {Encoder} encoder\n * @param {String} str The string that is to be encoded.\n */\n/* istanbul ignore next */\nexport const writeVarString = string.utf8TextEncoder ? _writeVarStringNative : _writeVarStringPolyfill\n\n/**\n * Write the content of another Encoder.\n *\n * @TODO: can be improved!\n *        - Note: Should consider that when appending a lot of small Encoders, we should rather clone than referencing the old structure.\n *                Encoders start with a rather big initial buffer.\n *\n * @function\n * @param {Encoder} encoder The enUint8Arr\n * @param {Encoder} append The BinaryEncoder to be written.\n */\nexport const writeBinaryEncoder = (encoder, append) => writeUint8Array(encoder, toUint8Array(append))\n\n/**\n * Append fixed-length Uint8Array to the encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {Uint8Array} uint8Array\n */\nexport const writeUint8Array = (encoder, uint8Array) => {\n  const bufferLen = encoder.cbuf.length\n  const cpos = encoder.cpos\n  const leftCopyLen = math.min(bufferLen - cpos, uint8Array.length)\n  const rightCopyLen = uint8Array.length - leftCopyLen\n  encoder.cbuf.set(uint8Array.subarray(0, leftCopyLen), cpos)\n  encoder.cpos += leftCopyLen\n  if (rightCopyLen > 0) {\n    // Still something to write, write right half..\n    // Append new buffer\n    encoder.bufs.push(encoder.cbuf)\n    // must have at least size of remaining buffer\n    encoder.cbuf = new Uint8Array(math.max(bufferLen * 2, rightCopyLen))\n    // copy array\n    encoder.cbuf.set(uint8Array.subarray(leftCopyLen))\n    encoder.cpos = rightCopyLen\n  }\n}\n\n/**\n * Append an Uint8Array to Encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {Uint8Array} uint8Array\n */\nexport const writeVarUint8Array = (encoder, uint8Array) => {\n  writeVarUint(encoder, uint8Array.byteLength)\n  writeUint8Array(encoder, uint8Array)\n}\n\n/**\n * Create an DataView of the next `len` bytes. Use it to write data after\n * calling this function.\n *\n * ```js\n * // write float32 using DataView\n * const dv = writeOnDataView(encoder, 4)\n * dv.setFloat32(0, 1.1)\n * // read float32 using DataView\n * const dv = readFromDataView(encoder, 4)\n * dv.getFloat32(0) // => 1.100000023841858 (leaving it to the reader to find out why this is the correct result)\n * ```\n *\n * @param {Encoder} encoder\n * @param {number} len\n * @return {DataView}\n */\nexport const writeOnDataView = (encoder, len) => {\n  verifyLen(encoder, len)\n  const dview = new DataView(encoder.cbuf.buffer, encoder.cpos, len)\n  encoder.cpos += len\n  return dview\n}\n\n/**\n * @param {Encoder} encoder\n * @param {number} num\n */\nexport const writeFloat32 = (encoder, num) => writeOnDataView(encoder, 4).setFloat32(0, num, false)\n\n/**\n * @param {Encoder} encoder\n * @param {number} num\n */\nexport const writeFloat64 = (encoder, num) => writeOnDataView(encoder, 8).setFloat64(0, num, false)\n\n/**\n * @param {Encoder} encoder\n * @param {bigint} num\n */\nexport const writeBigInt64 = (encoder, num) => /** @type {any} */ (writeOnDataView(encoder, 8)).setBigInt64(0, num, false)\n\n/**\n * @param {Encoder} encoder\n * @param {bigint} num\n */\nexport const writeBigUint64 = (encoder, num) => /** @type {any} */ (writeOnDataView(encoder, 8)).setBigUint64(0, num, false)\n\nconst floatTestBed = new DataView(new ArrayBuffer(4))\n/**\n * Check if a number can be encoded as a 32 bit float.\n *\n * @param {number} num\n * @return {boolean}\n */\nconst isFloat32 = num => {\n  floatTestBed.setFloat32(0, num)\n  return floatTestBed.getFloat32(0) === num\n}\n\n/**\n * Encode data with efficient binary format.\n *\n * Differences to JSON:\n * • Transforms data to a binary format (not to a string)\n * • Encodes undefined, NaN, and ArrayBuffer (these can't be represented in JSON)\n * • Numbers are efficiently encoded either as a variable length integer, as a\n *   32 bit float, as a 64 bit float, or as a 64 bit bigint.\n *\n * Encoding table:\n *\n * | Data Type           | Prefix   | Encoding Method    | Comment |\n * | ------------------- | -------- | ------------------ | ------- |\n * | undefined           | 127      |                    | Functions, symbol, and everything that cannot be identified is encoded as undefined |\n * | null                | 126      |                    | |\n * | integer             | 125      | writeVarInt        | Only encodes 32 bit signed integers |\n * | float32             | 124      | writeFloat32       | |\n * | float64             | 123      | writeFloat64       | |\n * | bigint              | 122      | writeBigInt64      | |\n * | boolean (false)     | 121      |                    | True and false are different data types so we save the following byte |\n * | boolean (true)      | 120      |                    | - 0b01111000 so the last bit determines whether true or false |\n * | string              | 119      | writeVarString     | |\n * | object<string,any>  | 118      | custom             | Writes {length} then {length} key-value pairs |\n * | array<any>          | 117      | custom             | Writes {length} then {length} json values |\n * | Uint8Array          | 116      | writeVarUint8Array | We use Uint8Array for any kind of binary data |\n *\n * Reasons for the decreasing prefix:\n * We need the first bit for extendability (later we may want to encode the\n * prefix with writeVarUint). The remaining 7 bits are divided as follows:\n * [0-30]   the beginning of the data range is used for custom purposes\n *          (defined by the function that uses this library)\n * [31-127] the end of the data range is used for data encoding by\n *          lib0/encoding.js\n *\n * @param {Encoder} encoder\n * @param {undefined|null|number|bigint|boolean|string|Object<string,any>|Array<any>|Uint8Array} data\n */\nexport const writeAny = (encoder, data) => {\n  switch (typeof data) {\n    case 'string':\n      // TYPE 119: STRING\n      write(encoder, 119)\n      writeVarString(encoder, data)\n      break\n    case 'number':\n      if (number.isInteger(data) && math.abs(data) <= binary.BITS31) {\n        // TYPE 125: INTEGER\n        write(encoder, 125)\n        writeVarInt(encoder, data)\n      } else if (isFloat32(data)) {\n        // TYPE 124: FLOAT32\n        write(encoder, 124)\n        writeFloat32(encoder, data)\n      } else {\n        // TYPE 123: FLOAT64\n        write(encoder, 123)\n        writeFloat64(encoder, data)\n      }\n      break\n    case 'bigint':\n      // TYPE 122: BigInt\n      write(encoder, 122)\n      writeBigInt64(encoder, data)\n      break\n    case 'object':\n      if (data === null) {\n        // TYPE 126: null\n        write(encoder, 126)\n      } else if (data instanceof Array) {\n        // TYPE 117: Array\n        write(encoder, 117)\n        writeVarUint(encoder, data.length)\n        for (let i = 0; i < data.length; i++) {\n          writeAny(encoder, data[i])\n        }\n      } else if (data instanceof Uint8Array) {\n        // TYPE 116: ArrayBuffer\n        write(encoder, 116)\n        writeVarUint8Array(encoder, data)\n      } else {\n        // TYPE 118: Object\n        write(encoder, 118)\n        const keys = Object.keys(data)\n        writeVarUint(encoder, keys.length)\n        for (let i = 0; i < keys.length; i++) {\n          const key = keys[i]\n          writeVarString(encoder, key)\n          writeAny(encoder, data[key])\n        }\n      }\n      break\n    case 'boolean':\n      // TYPE 120/121: boolean (true/false)\n      write(encoder, data ? 120 : 121)\n      break\n    default:\n      // TYPE 127: undefined\n      write(encoder, 127)\n  }\n}\n\n/**\n * Now come a few stateful encoder that have their own classes.\n */\n\n/**\n * Basic Run Length Encoder - a basic compression implementation.\n *\n * Encodes [1,1,1,7] to [1,3,7,1] (3 times 1, 1 time 7). This encoder might do more harm than good if there are a lot of values that are not repeated.\n *\n * It was originally used for image compression. Cool .. article http://csbruce.com/cbm/transactor/pdfs/trans_v7_i06.pdf\n *\n * @note T must not be null!\n *\n * @template T\n */\nexport class RleEncoder extends Encoder {\n  /**\n   * @param {function(Encoder, T):void} writer\n   */\n  constructor (writer) {\n    super()\n    /**\n     * The writer\n     */\n    this.w = writer\n    /**\n     * Current state\n     * @type {T|null}\n     */\n    this.s = null\n    this.count = 0\n  }\n\n  /**\n   * @param {T} v\n   */\n  write (v) {\n    if (this.s === v) {\n      this.count++\n    } else {\n      if (this.count > 0) {\n        // flush counter, unless this is the first value (count = 0)\n        writeVarUint(this, this.count - 1) // since count is always > 0, we can decrement by one. non-standard encoding ftw\n      }\n      this.count = 1\n      // write first value\n      this.w(this, v)\n      this.s = v\n    }\n  }\n}\n\n/**\n * Basic diff decoder using variable length encoding.\n *\n * Encodes the values [3, 1100, 1101, 1050, 0] to [3, 1097, 1, -51, -1050] using writeVarInt.\n */\nexport class IntDiffEncoder extends Encoder {\n  /**\n   * @param {number} start\n   */\n  constructor (start) {\n    super()\n    /**\n     * Current state\n     * @type {number}\n     */\n    this.s = start\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    writeVarInt(this, v - this.s)\n    this.s = v\n  }\n}\n\n/**\n * A combination of IntDiffEncoder and RleEncoder.\n *\n * Basically first writes the IntDiffEncoder and then counts duplicate diffs using RleEncoding.\n *\n * Encodes the values [1,1,1,2,3,4,5,6] as [1,1,0,2,1,5] (RLE([1,0,0,1,1,1,1,1]) ⇒ RleIntDiff[1,1,0,2,1,5])\n */\nexport class RleIntDiffEncoder extends Encoder {\n  /**\n   * @param {number} start\n   */\n  constructor (start) {\n    super()\n    /**\n     * Current state\n     * @type {number}\n     */\n    this.s = start\n    this.count = 0\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    if (this.s === v && this.count > 0) {\n      this.count++\n    } else {\n      if (this.count > 0) {\n        // flush counter, unless this is the first value (count = 0)\n        writeVarUint(this, this.count - 1) // since count is always > 0, we can decrement by one. non-standard encoding ftw\n      }\n      this.count = 1\n      // write first value\n      writeVarInt(this, v - this.s)\n      this.s = v\n    }\n  }\n}\n\n/**\n * @param {UintOptRleEncoder} encoder\n */\nconst flushUintOptRleEncoder = encoder => {\n  /* istanbul ignore else */\n  if (encoder.count > 0) {\n    // flush counter, unless this is the first value (count = 0)\n    // case 1: just a single value. set sign to positive\n    // case 2: write several values. set sign to negative to indicate that there is a length coming\n    writeVarInt(encoder.encoder, encoder.count === 1 ? encoder.s : -encoder.s)\n    if (encoder.count > 1) {\n      writeVarUint(encoder.encoder, encoder.count - 2) // since count is always > 1, we can decrement by one. non-standard encoding ftw\n    }\n  }\n}\n\n/**\n * Optimized Rle encoder that does not suffer from the mentioned problem of the basic Rle encoder.\n *\n * Internally uses VarInt encoder to write unsigned integers. If the input occurs multiple times, we write\n * write it as a negative number. The UintOptRleDecoder then understands that it needs to read a count.\n *\n * Encodes [1,2,3,3,3] as [1,2,-3,3] (once 1, once 2, three times 3)\n */\nexport class UintOptRleEncoder {\n  constructor () {\n    this.encoder = new Encoder()\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    if (this.s === v) {\n      this.count++\n    } else {\n      flushUintOptRleEncoder(this)\n      this.count = 1\n      this.s = v\n    }\n  }\n\n  toUint8Array () {\n    flushUintOptRleEncoder(this)\n    return toUint8Array(this.encoder)\n  }\n}\n\n/**\n * Increasing Uint Optimized RLE Encoder\n *\n * The RLE encoder counts the number of same occurences of the same value.\n * The IncUintOptRle encoder counts if the value increases.\n * I.e. 7, 8, 9, 10 will be encoded as [-7, 4]. 1, 3, 5 will be encoded\n * as [1, 3, 5].\n */\nexport class IncUintOptRleEncoder {\n  constructor () {\n    this.encoder = new Encoder()\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    if (this.s + this.count === v) {\n      this.count++\n    } else {\n      flushUintOptRleEncoder(this)\n      this.count = 1\n      this.s = v\n    }\n  }\n\n  toUint8Array () {\n    flushUintOptRleEncoder(this)\n    return toUint8Array(this.encoder)\n  }\n}\n\n/**\n * @param {IntDiffOptRleEncoder} encoder\n */\nconst flushIntDiffOptRleEncoder = encoder => {\n  if (encoder.count > 0) {\n    //          31 bit making up the diff | wether to write the counter\n    // const encodedDiff = encoder.diff << 1 | (encoder.count === 1 ? 0 : 1)\n    const encodedDiff = encoder.diff * 2 + (encoder.count === 1 ? 0 : 1)\n    // flush counter, unless this is the first value (count = 0)\n    // case 1: just a single value. set first bit to positive\n    // case 2: write several values. set first bit to negative to indicate that there is a length coming\n    writeVarInt(encoder.encoder, encodedDiff)\n    if (encoder.count > 1) {\n      writeVarUint(encoder.encoder, encoder.count - 2) // since count is always > 1, we can decrement by one. non-standard encoding ftw\n    }\n  }\n}\n\n/**\n * A combination of the IntDiffEncoder and the UintOptRleEncoder.\n *\n * The count approach is similar to the UintDiffOptRleEncoder, but instead of using the negative bitflag, it encodes\n * in the LSB whether a count is to be read. Therefore this Encoder only supports 31 bit integers!\n *\n * Encodes [1, 2, 3, 2] as [3, 1, 6, -1] (more specifically [(1 << 1) | 1, (3 << 0) | 0, -1])\n *\n * Internally uses variable length encoding. Contrary to normal UintVar encoding, the first byte contains:\n * * 1 bit that denotes whether the next value is a count (LSB)\n * * 1 bit that denotes whether this value is negative (MSB - 1)\n * * 1 bit that denotes whether to continue reading the variable length integer (MSB)\n *\n * Therefore, only five bits remain to encode diff ranges.\n *\n * Use this Encoder only when appropriate. In most cases, this is probably a bad idea.\n */\nexport class IntDiffOptRleEncoder {\n  constructor () {\n    this.encoder = new Encoder()\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n    this.diff = 0\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    if (this.diff === v - this.s) {\n      this.s = v\n      this.count++\n    } else {\n      flushIntDiffOptRleEncoder(this)\n      this.count = 1\n      this.diff = v - this.s\n      this.s = v\n    }\n  }\n\n  toUint8Array () {\n    flushIntDiffOptRleEncoder(this)\n    return toUint8Array(this.encoder)\n  }\n}\n\n/**\n * Optimized String Encoder.\n *\n * Encoding many small strings in a simple Encoder is not very efficient. The function call to decode a string takes some time and creates references that must be eventually deleted.\n * In practice, when decoding several million small strings, the GC will kick in more and more often to collect orphaned string objects (or maybe there is another reason?).\n *\n * This string encoder solves the above problem. All strings are concatenated and written as a single string using a single encoding call.\n *\n * The lengths are encoded using a UintOptRleEncoder.\n */\nexport class StringEncoder {\n  constructor () {\n    /**\n     * @type {Array<string>}\n     */\n    this.sarr = []\n    this.s = ''\n    this.lensE = new UintOptRleEncoder()\n  }\n\n  /**\n   * @param {string} string\n   */\n  write (string) {\n    this.s += string\n    if (this.s.length > 19) {\n      this.sarr.push(this.s)\n      this.s = ''\n    }\n    this.lensE.write(string.length)\n  }\n\n  toUint8Array () {\n    const encoder = new Encoder()\n    this.sarr.push(this.s)\n    this.s = ''\n    writeVarString(encoder, this.sarr.join(''))\n    writeUint8Array(encoder, this.lensE.toUint8Array())\n    return toUint8Array(encoder)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}